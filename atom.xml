<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>月光中的污点</title>
  <icon>https://www.gravatar.com/avatar/349377edd1f2525f251e02b16f1d86cc</icon>
  <subtitle>云在青天水在瓶</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.extlight.com/"/>
  <updated>2017-09-18T04:53:57.035Z</updated>
  <id>http://www.extlight.com/</id>
  
  <author>
    <name>moonlightL</name>
    <email>jx8996@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习 Git 玩转 GitHub</title>
    <link href="http://www.extlight.com/2017/09/18/%E5%AD%A6%E4%B9%A0Git%E7%8E%A9%E8%BD%ACGitHub/"/>
    <id>http://www.extlight.com/2017/09/18/学习Git玩转GitHub/</id>
    <published>2017-09-18T03:26:50.000Z</published>
    <updated>2017-09-18T04:53:57.035Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本了解"><a href="#基本了解" class="headerlink" title="基本了解"></a>基本了解</h2><h3 id="什么是版本控制系统"><a href="#什么是版本控制系统" class="headerlink" title="什么是版本控制系统"></a>什么是版本控制系统</h3><p>版本控制系统是一种记录一个或若干个文件内容变化，以便将来查阅特定版本修订情况的系统。</p><h3 id="什么是-Git"><a href="#什么是-Git" class="headerlink" title="什么是 Git"></a>什么是 Git</h3><p>Git是一个免费、开源的版本控制软件</p><h3 id="什么是-Github"><a href="#什么是-Github" class="headerlink" title="什么是 Github"></a>什么是 Github</h3><p>Github是全球最大的社交编程及代码托管网站</p><h3 id="Git-和-GitHub-的关系"><a href="#Git-和-GitHub-的关系" class="headerlink" title="Git 和 GitHub 的关系"></a>Git 和 GitHub 的关系</h3><ul><li>Git是版本控制软件</li><li>Github是项目代码托管的平台，借助git来管理项目代码</li></ul><h3 id="什么要学习-GitHub"><a href="#什么要学习-GitHub" class="headerlink" title="什么要学习 GitHub"></a>什么要学习 GitHub</h3><ul><li>学习优秀的开源项目</li><li>关注行业前辈了解最新的行业动态</li></ul><h2 id="使用-GitHub"><a href="#使用-GitHub" class="headerlink" title="使用 GitHub"></a>使用 GitHub</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>借助 GitHub 托管项目代码</p><h3 id="GitHub-中的基本概念"><a href="#GitHub-中的基本概念" class="headerlink" title="GitHub 中的基本概念"></a>GitHub 中的基本概念</h3><h4 id="Repository（仓库）"><a href="#Repository（仓库）" class="headerlink" title="Repository（仓库）"></a>Repository（仓库）</h4><p>仓库用来存放项目代码，每个项目对应一个仓库，多个开源项目则有多个仓库</p><h4 id="Watch（关注）"><a href="#Watch（关注）" class="headerlink" title="Watch（关注）"></a>Watch（关注）</h4><p>关注项目，当项目更新可以接收到通知</p><h4 id="Star（收藏）"><a href="#Star（收藏）" class="headerlink" title="Star（收藏）"></a>Star（收藏）</h4><p>收藏项目，方便下次查看</p><h4 id="Fork（复制克隆项目）"><a href="#Fork（复制克隆项目）" class="headerlink" title="Fork（复制克隆项目）"></a>Fork（复制克隆项目）</h4><p>复制克隆别人的项目到自己的 Github 仓库中，独立存在，任何操作都不会对原先的仓库造成影响。</p><h4 id="Issue（问题讨论）"><a href="#Issue（问题讨论）" class="headerlink" title="Issue（问题讨论）"></a>Issue（问题讨论）</h4><p>发现代码 bug 时，发起消息与作者讨论</p><h4 id="Pull-Request（发起请求）"><a href="#Pull-Request（发起请求）" class="headerlink" title="Pull Request（发起请求）"></a>Pull Request（发起请求）</h4><p>当 fork 仓库，修改仓库的 bug 或 添加新功能后，想同步到原先的仓库时，发起请求给原仓库作者，让其对代码审核与合并。</p><h3 id="注册-GitHub-账号"><a href="#注册-GitHub-账号" class="headerlink" title="注册 GitHub 账号"></a>注册 GitHub 账号</h3><p>第一步：登陆官网 <a href="https://github.com" target="_blank" rel="external">GitHub官网</a>，如下图：</p><p><img src="http://ow97db1io.bkt.clouddn.com/github-1.jpg" alt="image"></p><p>第二步：点击首页右上角的 “Sign up”，进入如下页面：</p><p><img src="http://ow97db1io.bkt.clouddn.com/github-2.jpg" alt="image"></p><p>填写好信息，点击 “Create an account”，来到如下页面：</p><p><img src="http://ow97db1io.bkt.clouddn.com/github-3.jpg" alt="image"></p><p>GitHub已经帮我们设置好默认选项，我们只管点击左下角绿色按钮即可。</p><p>当看到下边的界面时，我们就注册好账号了：</p><p><img src="http://ow97db1io.bkt.clouddn.com/github-4.jpg" alt="image"></p><h3 id="创建仓库-创建新项目"><a href="#创建仓库-创建新项目" class="headerlink" title="创建仓库/创建新项目"></a>创建仓库/创建新项目</h3><p>点击上图 “Start a project” 按钮创建项目（仓库）。但是，由于我们刚注册好账号，并没有对邮件地址进行合法校验。所以会出现如下界面：</p><p><img src="http://ow97db1io.bkt.clouddn.com/github-5.jpg" alt="image"></p><p>点击 红色框住的链接，GitHub 会跳转页面且重新发送一封邮件让我们进行对邮箱地址的校验。如图：</p><p><img src="http://ow97db1io.bkt.clouddn.com/github-6.jpg" alt="image"></p><p>笔者使用的是 qq 邮箱，点击右下角提示进入到 qq 邮箱管理界面，如图：</p><p><img src="http://ow97db1io.bkt.clouddn.com/github-7.jpg" alt="image"></p><p>点击 “Verify email address” 连接进行校验，浏览器会打开新标签提示邮箱地址校验成功。</p><p><img src="http://ow97db1io.bkt.clouddn.com/github-8.jpg" alt="image"></p><p>此时，我们点击 “Start a project” 就能真正创建项目了。此时，我们会来到如下界面：</p><p><img src="http://ow97db1io.bkt.clouddn.com/github-9.jpg" alt="image"></p><p>填写好基本信息，点击 “Create a repository”，来到仓库管理界面：</p><p><img src="http://ow97db1io.bkt.clouddn.com/github-10.jpg" alt="image"></p><p>根据图中的标注，我们可以根据自己的需求管理仓库。</p><h3 id="开源项目贡献流程"><a href="#开源项目贡献流程" class="headerlink" title="开源项目贡献流程"></a>开源项目贡献流程</h3><h4 id="新建Issue"><a href="#新建Issue" class="headerlink" title="新建Issue"></a>新建Issue</h4><p>提交使用问题、建议或者想法</p><h4 id="Pull-Request"><a href="#Pull-Request" class="headerlink" title="Pull Request"></a>Pull Request</h4><ol><li>fork 项目</li><li>修改自己仓库的项目代码</li><li>新建 pull request</li><li>等待作者操作审核</li></ol><h2 id="使用-Git"><a href="#使用-Git" class="headerlink" title="使用 Git"></a>使用 Git</h2><h3 id="目的-1"><a href="#目的-1" class="headerlink" title="目的"></a>目的</h3><p>通过 Git 管理 GitHub 托管项目代码</p><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>登陆 <a href="https://www.git-scm.com/download/win" target="_blank" rel="external">https://www.git-scm.com/download/win</a> 下载</p><p>安装过程傻瓜化方式（在选择安装时，选择 Git Bash 和 Git GUI ，其余默认选项即可），步骤省略。</p><h3 id="Git-工作原理"><a href="#Git-工作原理" class="headerlink" title="Git 工作原理"></a>Git 工作原理</h3><p>对于任何一个文件，在 Git 内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。已提交表示该文件已经被安全地保存在本地数据库中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。</p><p>由此我们看到 Git 管理项目时，文件流转的三个工作区域：Git 的工作目录，暂存区域，以及本地仓库。</p><p> <img src="http://ow97db1io.bkt.clouddn.com/git-1.png" alt="image"></p><p> 每个项目都有一个 Git 目录（如果 git clone 出来的话，就是其中 .git 的目录）。它是 Git 用来保存元数据和对象数据库的地方。该目录非常重要，每次克隆镜像仓库的时候，实际拷贝的就是这个目录里面的数据。</p><p> 从项目中取出某个版本的所有文件和目录，用以开始后续工作的叫做工作目录。这些文件实际上都是从 Git 目录中的压缩对象数据库中提取出来的，接下来就可以在工作目录中对这些文件进行编辑。</p><p> 所谓的暂存区域只不过是个简单的文件，一般都放在 Git 目录中。有时候人们会把这个文件叫做索引文件，不过标准说法还是叫暂存区域。</p><p> 基本的 Git 工作流程如下：</p><ul><li>在工作目录中修改某些文件</li><li>对修改后的文件进行快照，然后保存到暂存区域</li><li>提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。</li></ul><h3 id="Git-基本命令"><a href="#Git-基本命令" class="headerlink" title="Git 基本命令"></a>Git 基本命令</h3><h4 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h4><p>初始化工作目录，在当前目录下会创建一个名为 .git 的隐藏文件夹。</p><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h4><p>创建或编辑文件后，执行该命令，将文件添加到暂存区</p><h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h4><p>将暂存区的文件推送到仓库中</p><h4 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h4><p>列出当前目录所有还没有被 Git 管理的文件和被 Git 管理且被修改但还未提交(git commit)的文件</p><h4 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h4><p>检测远程仓库所有分支</p><h4 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h4><p>切换分支</p><h4 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h4><p>查看当前所在分支</p><h4 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h4><p>删除仓库中的文件</p><h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h4><p>克隆远程仓库</p><h4 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h4><p>同步本地仓库到远程仓库</p><h3 id="Git-管理远程仓库"><a href="#Git-管理远程仓库" class="headerlink" title="Git 管理远程仓库"></a>Git 管理远程仓库</h3><p>Git 连接和管理 GitHub 上的文件，为了安全性，需要设置公钥。</p><p>之前的步骤我们安装了 Git，打开 Git 安装目录下的 Git Bash ，键入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;GitHub邮箱地址&quot;</div></pre></td></tr></table></figure><p>命令执行后会提示输入信息，我们不用填写，直接回车。最终会在系统 “C:/Users/用户名/.ssh/“ 目录中生成 rsa 和 rsa.pub 文件。</p><p>打开 rsa.pub 文件复制里边的所有内容。</p><p>回到 GitHub 中，按照如下图操作：</p><p><img src="http://ow97db1io.bkt.clouddn.com/github-11.jpg" alt="image"></p><p>最后我们进行测试，在 Git Bash 中键入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure><p>如果出现 “Hi xxx! You’ve successfully authenticated” 字样，说明我们配置成功了。</p><p><img src="http://ow97db1io.bkt.clouddn.com/git-2.jpg" alt="image"></p><p>下边我们模拟场景运用 Git 命令将文件提交到 GitHub 的仓库中。</p><p><strong>场景一：非 clone 方式</strong><br>该场景下，我们没有对远程仓库进行关联，需要手动初始化 .git 文件夹</p><p>在 “E:\demo\git\test1”（自定义） 中，使用 Git Bash 或 CMD 键入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line"></div><div class="line">echo &quot;hello world&quot; &gt; test.txt</div><div class="line"></div><div class="line">git add .</div><div class="line"></div><div class="line">git status</div><div class="line"></div><div class="line">git commit -m &quot;first commit&quot;</div><div class="line"></div><div class="line">#添加需要连接的远程仓库地址（关联远程仓库）</div><div class="line">git remote add origin git@github.com:bluesky960/test.git </div><div class="line"></div><div class="line">git fetch </div><div class="line"></div><div class="line"># 切换到 master 分支</div><div class="line">git checkout master </div><div class="line"></div><div class="line">git branch </div><div class="line"></div><div class="line">git push origin master</div></pre></td></tr></table></figure><p>此时，在 Github 的 test 仓库中会多出 test.txt 文件。</p><p><strong>场景二：clone 方式</strong></p><p>在 “E:\demo\git\test2”（自定义） 中，使用 Git Bash 或 CMD 键入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># 执行 clone 操作会在当前目录中创建 .git 文件夹，关联远程仓库</div><div class="line">git clone git@github.com:bluesky960/test.git</div><div class="line"></div><div class="line">cd test</div><div class="line"></div><div class="line">echo &quot;clone hello world&quot; &gt; test2.txt</div><div class="line"></div><div class="line">git add .</div><div class="line"></div><div class="line">git commit -m &quot;add file&quot;</div><div class="line"></div><div class="line">git push</div></pre></td></tr></table></figure><p>此时，在 Github 的 test 仓库中会多出 test2.txt 文件。</p><p><strong>为了防止每次同步文件都需要输入账号和密码，我们需要进特殊配置</strong></p><p>打开 Git Bash 窗口，键入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;GitHub用户名&quot;</div><div class="line">    </div><div class="line">git config --global user.email &quot;GitHub邮箱地址&quot;</div></pre></td></tr></table></figure><p><strong>踩坑提醒</strong></p><p>在执行 “git remote add origin” 命令时，后边跟着是 SSH 类型的仓库地址，否则，在每次 git push 时都要输入账号和密码！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://www.nowamagic.net/academy/detail/48160210" target="_blank" rel="external">http://www.nowamagic.net/academy/detail/48160210</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本了解&quot;&gt;&lt;a href=&quot;#基本了解&quot; class=&quot;headerlink&quot; title=&quot;基本了解&quot;&gt;&lt;/a&gt;基本了解&lt;/h2&gt;&lt;h3 id=&quot;什么是版本控制系统&quot;&gt;&lt;a href=&quot;#什么是版本控制系统&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="其他" scheme="http://www.extlight.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Git" scheme="http://www.extlight.com/tags/Git/"/>
    
      <category term="GitHub" scheme="http://www.extlight.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>简单介绍</title>
    <link href="http://www.extlight.com/2017/09/15/%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.extlight.com/2017/09/15/简单介绍/</id>
    <published>2017-09-15T08:21:17.000Z</published>
    <updated>2017-09-15T09:15:06.512Z</updated>
    
    <content type="html"><![CDATA[<p><strong>新博客上线</strong></p><p>之前在博客园写博客，但是由于其排版和样式不够友好，因此笔者搭建新博客系统。以后就在这里博客。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;新博客上线&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之前在博客园写博客，但是由于其排版和样式不够友好，因此笔者搭建新博客系统。以后就在这里博客。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="其他" scheme="http://www.extlight.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
</feed>
