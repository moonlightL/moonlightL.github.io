<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>月光中的污点</title>
  <icon>https://www.gravatar.com/avatar/349377edd1f2525f251e02b16f1d86cc</icon>
  <subtitle>云在青天水在瓶</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.extlight.com/"/>
  <updated>2017-10-07T02:38:38.407Z</updated>
  <id>http://www.extlight.com/</id>
  
  <author>
    <name>moonlightL</name>
    <email>jx8996@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL 性能优化技巧</title>
    <link href="http://www.extlight.com/2017/10/07/MySQL-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"/>
    <id>http://www.extlight.com/2017/10/07/MySQL-性能优化技巧/</id>
    <published>2017-10-07T02:11:43.000Z</published>
    <updated>2017-10-07T02:38:38.407Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>最近公司项目添加新功能，上线后发现有些功能的列表查询时间很久。原因是新功能用到旧功能的接口，而这些旧接口的 SQL 查询语句关联5,6张表且编写不够规范，导致 MySQL 在执行 SQL 语句时索引失效，进行全表扫描。原本负责优化的同事有事请假回家，因此优化查询数据的问题落在笔者手中。笔者在查阅网上 SQL 优化的资料后成功解决了问题，在此从<strong>全局角度</strong>记录和总结 MySQL 查询优化相关技巧。</p><h2 id="二、优化思路"><a href="#二、优化思路" class="headerlink" title="二、优化思路"></a>二、优化思路</h2><p><strong>数据查询慢，不代表 SQL 语句写法有问题。</strong> 首先，我们需要找到问题的源头才能“对症下药”。笔者用一张流程图展示 MySQL 优化的思路：</p><p><img src="http://ow97db1io.bkt.clouddn.com/mysql-optimized.jpg" alt="image"></p><p>无需更多言语，从图中可以清楚地看出，导致数据查询慢的原因有多种，如：缓存失效，在此一段时间内由于高并发访问导致 MySQL 服务器崩溃；SQL 语句编写问题；MySQL 服务器参数问题；硬件配置限制 MySQL 服务性能问题等。</p><a id="more"></a><h2 id="三、查看-MySQL-服务器运行的状态值"><a href="#三、查看-MySQL-服务器运行的状态值" class="headerlink" title="三、查看 MySQL 服务器运行的状态值"></a>三、查看 MySQL 服务器运行的状态值</h2><p><strong>如果系统的并发请求数不高，且查询速度慢，可以忽略该步骤直接进行 SQL 语句调优步骤。</strong></p><p>执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show status</div></pre></td></tr></table></figure><p>由于返回结果太多，此处不贴出结果。其中，再返回的结果中，我们主要关注 “Queries”、“Threads_connected” 和 “Threads_running” 的值，即查询次数、线程连接数和线程运行数。</p><p>我们可以通过执行如下脚本监控 MySQL 服务器运行的状态值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">while true</div><div class="line">do</div><div class="line">mysqladmin -uroot -p&quot;密码&quot; ext | awk &apos;/Queries/&#123;q=$4&#125;/Threads_connected/&#123;c=$4&#125;/Threads_running/&#123;r=$4&#125;END&#123;printf(&quot;%d %d %d\n&quot;,q,c,r)&#125;&apos; &gt;&gt; status.txt</div><div class="line">sleep 1</div><div class="line">done</div></pre></td></tr></table></figure><p>执行该脚本 24 小时，获取 status.txt 里的内容，再次通过 awk 计算<strong>每秒请求 MySQL 服务的次数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk &apos;&#123;q=$1-last;last=$1&#125;&#123;printf(&quot;%d %d %d\n&quot;,q,$2,$3)&#125;&apos; status.txt</div></pre></td></tr></table></figure><p>复制计算好的内容到 Excel 中生成图表观察数据周期性。</p><p>如果观察的数据有周期性的变化，如上图的解释，需要修改缓存失效策略。</p><p>例如：</p><p>通过随机数在[3,6,9] 区间获取其中一个值作为缓存失效时间，这样分散了缓存失效时间，从而节省了一部分内存的消耗。</p><p>当访问高峰期时，一部分请求分流到未失效的缓存，另一部分则访问 MySQL 数据库，这样减少了 MySQL 服务器的压力。</p><h2 id="四、获取需要优化的-SQL-语句"><a href="#四、获取需要优化的-SQL-语句" class="headerlink" title="四、获取需要优化的 SQL 语句"></a>四、获取需要优化的 SQL 语句</h2><h3 id="4-1-方式一：查看运行的线程"><a href="#4-1-方式一：查看运行的线程" class="headerlink" title="4.1 方式一：查看运行的线程"></a>4.1 方式一：查看运行的线程</h3><p>执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show processlist</div></pre></td></tr></table></figure></p><p>返回结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show processlist;</div><div class="line">+----+------+-----------+------+---------+------+----------+------------------+</div><div class="line">| Id | User | Host      | db   | Command | Time | State    | Info             |</div><div class="line">+----+------+-----------+------+---------+------+----------+------------------+</div><div class="line">|  9 | root | localhost | test | Query   |    0 | starting | show processlist |</div><div class="line">+----+------+-----------+------+---------+------+----------+------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p><p>从返回结果中我们可以了解该线程执行了什么命令/SQL 语句以及执行的时间。实际应用中，查询的返回结果会有 N 条记录。</p><p>其中，<strong>返回的 State 的值是我们判断性能好坏的关键</strong>，其值出现如下内容，则该行记录的 SQL 语句需要优化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Converting HEAP to MyISAM # 查询结果太大时，把结果放到磁盘，严重</div><div class="line">Create tmp table #创建临时表，严重</div><div class="line">Copying to tmp table on disk  #把内存临时表复制到磁盘，严重</div><div class="line">locked #被其他查询锁住，严重</div><div class="line">loggin slow query #记录慢查询</div><div class="line">Sorting result #排序</div></pre></td></tr></table></figure></p><p>State 字段有很多值，如需了解更多，可以参看文章末尾提供的链接。</p><h3 id="4-2-方式二：开启慢查询日志"><a href="#4-2-方式二：开启慢查询日志" class="headerlink" title="4.2 方式二：开启慢查询日志"></a>4.2 方式二：开启慢查询日志</h3><p>在配置文件 my.cnf 中的 [mysqld] 一行下边添加两个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">slow_query_log = 1</div><div class="line">slow_query_log_file=/var/lib/mysql/slow-query.log</div><div class="line">long_query_time = 2</div><div class="line"></div><div class="line">log_queries_not_using_indexes = 1</div></pre></td></tr></table></figure><p>其中，slow_query_log = 1 表示开启慢查询；</p><p>slow_query_log_file 表示慢查询日志存放的位置；</p><p>long_query_time = 2 表示查询 &gt;=2 秒才记录日志；</p><p>log_queries_not_using_indexes = 1 记录没有使用索引的 SQL 语句。</p><p><strong>注意：slow_query_log_file 的路径不能随便写，否则 MySQL 服务器可能没有权限将日志文件写到指定的目录中。建议直接复制上文的路径。</strong></p><p>修改保存文件后，重启 MySQL 服务。在 /var/lib/mysql/ 目录下会创建 slow-query.log 日志文件。连接 MySQL 服务端执行如下命令可以查看配置情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">show variables like &apos;slow_query%&apos;;</div><div class="line"></div><div class="line">show variables like &apos;long_query_time&apos;;</div></pre></td></tr></table></figure><p>测试慢查询日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select sleep(2);</div><div class="line">+----------+</div><div class="line">| sleep(2) |</div><div class="line">+----------+</div><div class="line">|        0 |</div><div class="line">+----------+</div><div class="line">1 row in set (2.00 sec)</div></pre></td></tr></table></figure><p>打开慢查询日志文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@localhost mysql]# vim /var/lib/mysql/slow-query.log</div><div class="line">/usr/sbin/mysqld, Version: 5.7.19-log (MySQL Community Server (GPL)). started with:</div><div class="line">Tcp port: 0  Unix socket: /var/lib/mysql/mysql.sock</div><div class="line">Time                 Id Command    Argument</div><div class="line"># Time: 2017-10-05T04:39:11.408964Z</div><div class="line"># User@Host: root[root] @ localhost []  Id:     3</div><div class="line"># Query_time: 2.001395  Lock_time: 0.000000 Rows_sent: 1  Rows_examined: 0</div><div class="line">use test;</div><div class="line">SET timestamp=1507178351;</div><div class="line">select sleep(2);</div></pre></td></tr></table></figure><p>我们可以看到刚才执行了 2 秒的 SQL 语句被记录下来了。</p><p>虽然在慢查询日志中记录查询慢的 SQL 信息，但是日志记录的内容密集且不易查阅。因此，我们需要通过工具将 SQL 筛选出来。</p><p>MySQL 提供 mysqldumpslow 工具对日志进行分析。我们可以使用 mysqldumpslow –help 查看命令相关用法。</p><p>常用参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">-s：排序方式，后边接着如下参数</div><div class="line">    c：访问次数</div><div class="line">    l：锁定时间</div><div class="line">    r：返回记录</div><div class="line">    t：查询时间</div><div class="line">al：平均锁定时间</div><div class="line">ar：平均返回记录书</div><div class="line">at：平均查询时间</div><div class="line">-t：返回前面多少条的数据</div><div class="line">-g：翻遍搭配一个正则表达式，大小写不敏感</div></pre></td></tr></table></figure><p>案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">获取返回记录集最多的10个sql</div><div class="line">mysqldumpslow -s r -t 10 /var/lib/mysql/slow-query.log</div><div class="line"></div><div class="line">获取访问次数最多的10个sql</div><div class="line">mysqldumpslow -s c -t 10 /var/lib/mysql/slow-query.log</div><div class="line"></div><div class="line">获取按照时间排序的前10条里面含有左连接的查询语句</div><div class="line">mysqldumpslow -s t -t 10 -g &quot;left join&quot; /var/lib/mysql/slow-query.log</div></pre></td></tr></table></figure><h2 id="五、分析-SQL-语句"><a href="#五、分析-SQL-语句" class="headerlink" title="五、分析 SQL 语句"></a>五、分析 SQL 语句</h2><h3 id="5-1-方式一：explain"><a href="#5-1-方式一：explain" class="headerlink" title="5.1 方式一：explain"></a>5.1 方式一：explain</h3><p>筛选出有问题的 SQL，我们可以使用 MySQL 提供的 explain 查看 SQL 执行计划情况（关联表，表查询顺序、索引使用情况等）。</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">explain select * from category;</div></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; explain select * from category;</div><div class="line">+----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------+</div><div class="line">| id | select_type | table    | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |</div><div class="line">+----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------+</div><div class="line">|  1 | SIMPLE      | category | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    1 |   100.00 | NULL  |</div><div class="line">+----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------+</div><div class="line">1 row in set, 1 warning (0.00 sec)</div></pre></td></tr></table></figure><p>字段解释：<br>1) id：select 查询序列号。id相同，执行顺序由上至下；id不同，id值越大优先级越高，越先被执行</p><p>2) select_type：查询数据的操作类型，其值如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">simple：简单查询，不包含子查询或 union</div><div class="line">primary:包含复杂的子查询，最外层查询标记为该值</div><div class="line">subquery：在 select 或 where 包含子查询，被标记为该值</div><div class="line">derived：在 from 列表中包含的子查询被标记为该值，MySQL 会递归执行这些子查询，把结果放在临时表</div><div class="line">union：若第二个 select 出现在 union 之后，则被标记为该值。若 union 包含在 from 的子查询中，外层 select 被标记为 derived    </div><div class="line">union result：从 union 表获取结果的 select</div></pre></td></tr></table></figure><p>3) table：显示该行数据是关于哪张表</p><p>4) partitions：匹配的分区</p><p>5) type：表的连接类型，其值，性能由高到底排列如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">system：表只有一行记录，相当于系统表</div><div class="line">const：通过索引一次就找到，只匹配一行数据</div><div class="line">eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常用于主键或唯一索引扫描</div><div class="line">ref：非唯一性索引扫描，返回匹配某个单独值的所有行。用于=、&lt; 或 &gt; 操作符带索引的列</div><div class="line">range：只检索给定范围的行，使用一个索引来选择行。一般使用between、&gt;、&lt;情况</div><div class="line">index：只遍历索引树</div><div class="line">ALL：全表扫描，性能最差</div></pre></td></tr></table></figure><p><strong>注：前5种情况都是理想情况的索引使用情况。通常优化至少到range级别，最好能优化到 ref</strong></p><p>6) possible_keys：指出 MySQL 使用哪个索引在该表找到行记录。如果该值为 NULL，说明没有使用索引，可以建立索引提高性能</p><p>7) key：显示 MySQL 实际使用的索引。如果为 NULL，则没有使用索引查询</p><p>8) key_len：表示索引中使用的字节数，通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好<br>显示的是索引字段的最大长度，并非实际使用长度</p><p>9) ref：显示该表的索引字段关联了哪张表的哪个字段</p><p>10) rows：根据表统计信息及选用情况，大致估算出找到所需的记录或所需读取的行数，数值越小越好</p><p>11) filtered：返回结果的行数占读取行数的百分比，值越大越好</p><p>12) extra： 包含不合适在其他列中显示但十分重要的额外信息，常见的值如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">using filesort：说明 MySQL 会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。出现该值，应该优化 SQL</div><div class="line">using temporary：使用了临时表保存中间结果，MySQL 在对查询结果排序时使用临时表。常见于排序 order by 和分组查询 group by。出现该值，应该优化 SQL </div><div class="line">using index：表示相应的 select 操作使用了覆盖索引，避免了访问表的数据行，效率不错</div><div class="line">using where：where 子句用于限制哪一行</div><div class="line">using join buffer：使用连接缓存</div><div class="line">distinct：发现第一个匹配后，停止为当前的行组合搜索更多的行</div></pre></td></tr></table></figure><p><strong>注意：出现前 2 个值，SQL 语句必须要优化。</strong></p><h3 id="5-2-方式二：profiling"><a href="#5-2-方式二：profiling" class="headerlink" title="5.2 方式二：profiling"></a>5.2 方式二：profiling</h3><p>使用 profiling 命令可以了解 SQL 语句消耗资源的详细信息（每个执行步骤的开销）。</p><h4 id="5-2-1-查看-profile-开启情况"><a href="#5-2-1-查看-profile-开启情况" class="headerlink" title="5.2.1 查看 profile 开启情况"></a>5.2.1 查看 profile 开启情况</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select @@profiling;</div></pre></td></tr></table></figure><p>返回结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select @@profiling;</div><div class="line">+-------------+</div><div class="line">| @@profiling |</div><div class="line">+-------------+</div><div class="line">|           0 |</div><div class="line">+-------------+</div><div class="line">1 row in set, 1 warning (0.00 sec)</div></pre></td></tr></table></figure></p><p>0 表示关闭状态,1 表示开启</p><h4 id="5-2-2-启用-profile"><a href="#5-2-2-启用-profile" class="headerlink" title="5.2.2 启用 profile"></a>5.2.2 启用 profile</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set profiling = 1;</div></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mysql&gt; set profiling = 1;  </div><div class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; select @@profiling;</div><div class="line">+-------------+</div><div class="line">| @@profiling |</div><div class="line">+-------------+</div><div class="line">|           1 |</div><div class="line">+-------------+</div><div class="line">1 row in set, 1 warning (0.00 sec)</div></pre></td></tr></table></figure><p>在连接关闭后，profiling 状态自动设置为关闭状态。</p><h4 id="5-2-3-查看执行的-SQL-列表"><a href="#5-2-3-查看执行的-SQL-列表" class="headerlink" title="5.2.3 查看执行的 SQL 列表"></a>5.2.3 查看执行的 SQL 列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show profiles;</div></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show profiles;</div><div class="line">+----------+------------+------------------------------+</div><div class="line">| Query_ID | Duration   | Query                        |</div><div class="line">+----------+------------+------------------------------+</div><div class="line">|        1 | 0.00062925 | select @@profiling           |</div><div class="line">|        2 | 0.00094150 | show tables                  |</div><div class="line">|        3 | 0.00119125 | show databases               |</div><div class="line">|        4 | 0.00029750 | SELECT DATABASE()            |</div><div class="line">|        5 | 0.00025975 | show databases               |</div><div class="line">|        6 | 0.00023050 | show tables                  |</div><div class="line">|        7 | 0.00042000 | show tables                  |</div><div class="line">|        8 | 0.00260675 | desc role                    |</div><div class="line">|        9 | 0.00074900 | select name,is_key from role |</div><div class="line">+----------+------------+------------------------------+</div><div class="line">9 rows in set, 1 warning (0.00 sec)</div></pre></td></tr></table></figure><p>该命令执行之前，需要执行其他 SQL 语句才有记录。</p><h4 id="5-2-4-查询指定-ID-的执行详细信息"><a href="#5-2-4-查询指定-ID-的执行详细信息" class="headerlink" title="5.2.4 查询指定 ID 的执行详细信息"></a>5.2.4 查询指定 ID 的执行详细信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show profile for query Query_ID;</div></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show profile for query 9;</div><div class="line">+----------------------+----------+</div><div class="line">| Status               | Duration |</div><div class="line">+----------------------+----------+</div><div class="line">| starting             | 0.000207 |</div><div class="line">| checking permissions | 0.000010 |</div><div class="line">| Opening tables       | 0.000042 |</div><div class="line">| init                 | 0.000050 |</div><div class="line">| System lock          | 0.000012 |</div><div class="line">| optimizing           | 0.000003 |</div><div class="line">| statistics           | 0.000011 |</div><div class="line">| preparing            | 0.000011 |</div><div class="line">| executing            | 0.000002 |</div><div class="line">| Sending data         | 0.000362 |</div><div class="line">| end                  | 0.000006 |</div><div class="line">| query end            | 0.000006 |</div><div class="line">| closing tables       | 0.000006 |</div><div class="line">| freeing items        | 0.000011 |</div><div class="line">| cleaning up          | 0.000013 |</div><div class="line">+----------------------+----------+</div><div class="line">15 rows in set, 1 warning (0.00 sec)</div></pre></td></tr></table></figure><p>每行都是状态变化的过程以及它们持续的时间。Status 这一列和 show processlist 的 State 是一致的。因此，需要优化的注意点与上文描述的一样。</p><p>其中，Status 字段的值同样可以参考末尾链接。</p><h4 id="5-2-5-获取-CPU、-Block-IO-等信息"><a href="#5-2-5-获取-CPU、-Block-IO-等信息" class="headerlink" title="5.2.5 获取 CPU、 Block IO 等信息"></a>5.2.5 获取 CPU、 Block IO 等信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">show profile block io,cpu for query Query_ID;</div><div class="line"></div><div class="line">show profile cpu,block io,memory,swaps,context switches,source for query Query_ID;</div><div class="line"></div><div class="line">show profile all for query Query_ID;</div></pre></td></tr></table></figure><h2 id="六、优化手段"><a href="#六、优化手段" class="headerlink" title="六、优化手段"></a>六、优化手段</h2><p>主要以查询优化、索引使用和表结构设计方面进行讲解。</p><h3 id="6-1-查询优化"><a href="#6-1-查询优化" class="headerlink" title="6.1 查询优化"></a>6.1 查询优化</h3><p>1) 避免 SELECT *，需要什么数据，就查询对应的字段。</p><p>2) 小表驱动大表，即小的数据集驱动大的数据集。如：以 A，B 两表为例，两表通过 id 字段进行关联。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">当 B 表的数据集小于 A 表时，用 in 优化 exist；使用 in ，两表执行顺序是先查 B 表，再查 A 表</div><div class="line">select * from A where id in (select id from B)</div><div class="line"></div><div class="line">当 A 表的数据集小于 B 表时，用 exist 优化 in；使用 exists，两表执行顺序是先查 A 表，再查 B 表</div><div class="line">select * from A where exists (select 1 from B where B.id = A.id)</div></pre></td></tr></table></figure><p>3) 一些情况下，可以使用连接代替子查询，因为使用 join，MySQL 不会在内存中创建临时表。</p><p>4) 适当添加冗余字段，减少表关联。</p><p>5) 合理使用索引（下文介绍）。如：为排序、分组字段建立索引，避免 filesort 的出现。</p><h3 id="6-2-索引使用"><a href="#6-2-索引使用" class="headerlink" title="6.2 索引使用"></a>6.2 索引使用</h3><h4 id="6-2-1-适合使用索引的场景"><a href="#6-2-1-适合使用索引的场景" class="headerlink" title="6.2.1 适合使用索引的场景"></a>6.2.1 适合使用索引的场景</h4><p>1) 主键自动创建唯一索引</p><p>2) 频繁作为查询条件的字段</p><p>3) 查询中与其他表关联的字段</p><p>4) 查询中排序的字段</p><p>5) 查询中统计或分组字段</p><h4 id="6-2-2-不适合使用索引的场景"><a href="#6-2-2-不适合使用索引的场景" class="headerlink" title="6.2.2 不适合使用索引的场景"></a>6.2.2 不适合使用索引的场景</h4><p>1) 频繁更新的字段</p><p>2) where 条件中用不到的字段</p><p>3) 表记录太少</p><p>4) 经常增删改的表</p><p>5) 字段的值的差异性不大或重复性高</p><h4 id="6-2-3-索引创建和使用原则"><a href="#6-2-3-索引创建和使用原则" class="headerlink" title="6.2.3 索引创建和使用原则"></a>6.2.3 索引创建和使用原则</h4><p>1) 单表查询：哪个列作查询条件，就在该列创建索引</p><p>2) 多表查询：left join 时，索引添加到右表关联字段；right join 时，索引添加到左表关联字段</p><p>3) 不要对索引列进行任何操作（计算、函数、类型转换）</p><p>4) 索引列中不要使用 !=，&lt;&gt; 非等于</p><p>5) 索引列不要为空，且不要使用 is null 或 is not null 判断</p><p>6) 索引字段是字符串类型，查询条件的值要加’’单引号,避免底层类型自动转换</p><p><strong>违背上述原则可能会导致索引失效，具体情况需要使用 explain 命令进行查看</strong></p><h4 id="6-2-4-索引失效情况"><a href="#6-2-4-索引失效情况" class="headerlink" title="6.2.4 索引失效情况"></a>6.2.4 索引失效情况</h4><p>除了违背索引创建和使用原则外，如下情况也会导致索引失效：</p><p>1) 模糊查询时，以 % 开头</p><p>2) 使用 or 时，如：字段1（非索引）or 字段2（索引）会导致索引失效。</p><p>3) 使用复合索引时，不使用第一个索引列。</p><p>index(a,b,c) ，以字段 a,b,c 作为复合索引为例：</p><table><thead><tr><th>语句</th><th>索引是否生效</th></tr></thead><tbody><tr><td>where a = 1</td><td>是，字段 a 索引生效</td></tr><tr><td>where a = 1 and b = 2</td><td>是，字段 a 和 b 索引生效</td></tr><tr><td>where a = 1 and b = 2 and c = 3</td><td>是，全部生效</td></tr><tr><td>where b = 2 或 where c = 3</td><td>否</td></tr><tr><td>where a = 1 and c = 3</td><td>字段 a 生效，字段 c 失效</td></tr><tr><td>where a = 1 and b &gt; 2 and c = 3</td><td>字段 a，b 生效，字段 c 失效</td></tr><tr><td>where a = 1 and b like ‘xxx%’ and c = 3</td><td>字段 a，b 生效，字段 c 失效</td></tr></tbody></table><h3 id="6-3-数据库表结构设计"><a href="#6-3-数据库表结构设计" class="headerlink" title="6.3 数据库表结构设计"></a>6.3 数据库表结构设计</h3><h4 id="6-3-1-选择合适的数据类型"><a href="#6-3-1-选择合适的数据类型" class="headerlink" title="6.3.1 选择合适的数据类型"></a>6.3.1 选择合适的数据类型</h4><p>1) 使用可以存下数据最小的数据类型</p><p>2) 使用简单的数据类型。int 要比 varchar 类型在mysql处理简单</p><p>3) 尽量使用 tinyint、smallint、mediumint 作为整数类型而非 int</p><p>4) 尽可能使用 not null 定义字段，因为 null 占用4字节空间</p><p>5) 尽量少用 text 类型,非用不可时最好考虑分表</p><p>6) 尽量使用 timestamp 而非 datetime</p><p>7) 单表不要有太多字段，建议在 20 以内</p><h4 id="6-3-2-表的拆分"><a href="#6-3-2-表的拆分" class="headerlink" title="6.3.2 表的拆分"></a>6.3.2 表的拆分</h4><p>当数据库中的数据非常大时，查询优化方案也不能解决查询速度慢的问题时，我们可以考虑拆分表，让每张表的数据量变小，从而提高查询效率。</p><p>1) 垂直拆分：将表中多个列分开放到不同的表中。例如用户表中一些字段经常被访问，将这些字段放在一张表中，另外一些不常用的字段放在另一张表中。<br>插入数据时，使用事务确保两张表的数据一致性。</p><p>2) 水平拆分：按照行进行拆分。例如用户表中，使用用户ID，对用户ID取10的余数，将用户数据均匀的分配到0~9的10个用户表中。查找时也按照这个规则查询数据。</p><h4 id="6-3-3-读写分离"><a href="#6-3-3-读写分离" class="headerlink" title="6.3.3 读写分离"></a>6.3.3 读写分离</h4><p>一般情况下对数据库而言都是“读多写少”。换言之，数据库的压力多数是因为大量的读取数据的操作造成的。我们可以采用数据库集群的方案，使用一个库作为主库，负责写入数据；其他库为从库，负责读取数据。这样可以缓解对数据库的访问压力。</p><h2 id="七、服务器参数调优"><a href="#七、服务器参数调优" class="headerlink" title="七、服务器参数调优"></a>七、服务器参数调优</h2><h3 id="7-1-内存相关"><a href="#7-1-内存相关" class="headerlink" title="7.1 内存相关"></a>7.1 内存相关</h3><p>sort_buffer_size 排序缓冲区内存大小</p><p>join_buffer_size 使用连接缓冲区大小</p><p>read_buffer_size 全表扫描时分配的缓冲区大小</p><h3 id="7-2-IO-相关"><a href="#7-2-IO-相关" class="headerlink" title="7.2 IO 相关"></a>7.2 IO 相关</h3><p>Innodb_log_file_size 事务日志大小</p><p>Innodb_log_files_in_group 事务日志个数</p><p>Innodb_log_buffer_size 事务日志缓冲区大小</p><p>Innodb_flush_log_at_trx_commit 事务日志刷新策略，其值如下： </p><p>0：每秒进行一次 log 写入 cache，并 flush log 到磁盘</p><p>1：在每次事务提交执行 log 写入 cache，并 flush log 到磁盘</p><p>2：每次事务提交，执行 log 数据写到 cache，每秒执行一次 flush log 到磁盘</p><h3 id="7-3-安全相关"><a href="#7-3-安全相关" class="headerlink" title="7.3 安全相关"></a>7.3 安全相关</h3><p>expire_logs_days 指定自动清理 binlog 的天数</p><p>max_allowed_packet 控制 MySQL 可以接收的包的大小</p><p>skip_name_resolve 禁用 DNS 查找</p><p>read_only 禁止非 super 权限用户写权限</p><p>skip_slave_start 级你用 slave 自动恢复</p><h3 id="7-4-其他"><a href="#7-4-其他" class="headerlink" title="7.4 其他"></a>7.4 其他</h3><p>max_connections 控制允许的最大连接数</p><p>tmp_table_size 临时表大小</p><p>max_heap_table_size 最大内存表大小</p><p><strong>笔者并没有使用这些参数对 MySQL 服务器进行调优，具体详情介绍和性能效果请参考文章末尾的资料或另行百度。</strong></p><h2 id="八、硬件选购和参数优化"><a href="#八、硬件选购和参数优化" class="headerlink" title="八、硬件选购和参数优化"></a>八、硬件选购和参数优化</h2><p>硬件的性能直接决定 MySQL 数据库的性能。硬件的性能瓶颈，直接决定 MySQL 数据库的运行数据和效率。</p><p><strong>作为软件开发程序员，我们主要关注软件方面的优化内容，以下硬件方面的优化作为了解即可</strong></p><h3 id="8-1-内存相关"><a href="#8-1-内存相关" class="headerlink" title="8.1 内存相关"></a>8.1 内存相关</h3><p>内存的 IO 比硬盘的速度快很多，可以增加系统的缓冲区容量，使数据在内存停留的时间更长，以减少磁盘的 IO</p><h3 id="8-2-磁盘-I-O-相关"><a href="#8-2-磁盘-I-O-相关" class="headerlink" title="8.2 磁盘 I/O 相关"></a>8.2 磁盘 I/O 相关</h3><p>1) 使用 SSD 或 PCle SSD 设备，至少获得数百倍甚至万倍的 IOPS 提升</p><p>2) 购置阵列卡同时配备 CACHE 及 BBU 模块，可以明显提升 IOPS</p><p>3) 尽可能选用 RAID-10，而非 RAID-5</p><h3 id="8-3-配置-CUP-相关"><a href="#8-3-配置-CUP-相关" class="headerlink" title="8.3 配置 CUP 相关"></a>8.3 配置 CUP 相关</h3><p>在服务器的 BIOS 设置中，调整如下配置：</p><p>1) 选择 Performance Per Watt Optimized（DAPC）模式，发挥 CPU 最大性能</p><p>2) 关闭 C1E 和 C States 等选项，提升 CPU 效率</p><p>3) Memory Frequency（内存频率）选择 Maximum Performance</p><h2 id="九、参考资料"><a href="#九、参考资料" class="headerlink" title="九、参考资料"></a>九、参考资料</h2><ul><li><a href="https://dev.mysql.com/doc/refman/5.7/en/show-status.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.7/en/show-status.html</a> show status 语法</li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/show-processlist.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.7/en/show-processlist.html</a> show processlist 语法</li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/general-thread-states.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.7/en/general-thread-states.html</a> 线程状态</li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.7/en/explain-output.html</a> explain 语法</li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/show-profile.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.7/en/show-profile.html</a> show profile 语法</li><li><a href="http://blog.csdn.net/nightelve/article/details/17393631" target="_blank" rel="external">http://blog.csdn.net/nightelve/article/details/17393631</a> MySQL 服务器参数调优</li><li><a href="http://blog.csdn.net/qq_22929803/article/details/51237056" target="_blank" rel="external">http://blog.csdn.net/qq_22929803/article/details/51237056</a>  MySQL 服务器参数调优</li><li><a href="http://blog.chinaunix.net/uid-11640640-id-3426908.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-11640640-id-3426908.html</a></li><li><a href="https://segmentfault.com/a/1190000006158186" target="_blank" rel="external">https://segmentfault.com/a/1190000006158186</a></li><li><a href="http://blog.csdn.net/gzh0222/article/details/7976127" target="_blank" rel="external">http://blog.csdn.net/gzh0222/article/details/7976127</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h2&gt;&lt;p&gt;最近公司项目添加新功能，上线后发现有些功能的列表查询时间很久。原因是新功能用到旧功能的接口，而这些旧接口的 SQL 查询语句关联5,6张表且编写不够规范，导致 MySQL 在执行 SQL 语句时索引失效，进行全表扫描。原本负责优化的同事有事请假回家，因此优化查询数据的问题落在笔者手中。笔者在查阅网上 SQL 优化的资料后成功解决了问题，在此从&lt;strong&gt;全局角度&lt;/strong&gt;记录和总结 MySQL 查询优化相关技巧。&lt;/p&gt;
&lt;h2 id=&quot;二、优化思路&quot;&gt;&lt;a href=&quot;#二、优化思路&quot; class=&quot;headerlink&quot; title=&quot;二、优化思路&quot;&gt;&lt;/a&gt;二、优化思路&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;数据查询慢，不代表 SQL 语句写法有问题。&lt;/strong&gt; 首先，我们需要找到问题的源头才能“对症下药”。笔者用一张流程图展示 MySQL 优化的思路：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ow97db1io.bkt.clouddn.com/mysql-optimized.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;无需更多言语，从图中可以清楚地看出，导致数据查询慢的原因有多种，如：缓存失效，在此一段时间内由于高并发访问导致 MySQL 服务器崩溃；SQL 语句编写问题；MySQL 服务器参数问题；硬件配置限制 MySQL 服务性能问题等。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://www.extlight.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL 调优" scheme="http://www.extlight.com/tags/MySQL-%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
  <entry>
    <title>Centos 7.2 安装和卸载 MySQL 5.7</title>
    <link href="http://www.extlight.com/2017/10/02/Centos-7-2-%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD-MySQL/"/>
    <id>http://www.extlight.com/2017/10/02/Centos-7-2-安装和卸载-MySQL/</id>
    <published>2017-10-02T07:14:45.000Z</published>
    <updated>2017-10-06T05:33:05.156Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ow97db1io.bkt.clouddn.com/mysql-1.jpg" alt=""></p><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>闲暇之余在虚拟机安装了 Centos 7.2 系统，按照 <a href="http://www.cnblogs.com/moonlightL/p/7265595.html" target="_blank" rel="external">《简单安装MySQL（RPM方式）》</a> 这篇文章安装 MySQL ，发现由于包依赖的问题安装失败，于是索性在官网查询相关文档进行 MySQL 的安装。</p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><h3 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1 下载"></a>2.1 下载</h3><p>本次安装选择 <strong><em><a href="https://dev.mysql.com/doc/refman/5.7/en/linux-installation-yum-repo.html" target="_blank" rel="external">Installing MySQL on Linux Using the MySQL Yum Repository</a></em></strong> 方式</p><p>在 <a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="external">https://dev.mysql.com/downloads/repo/yum/</a> 选择需要安装的文件，笔者选择 MySQL 5.7 版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</div></pre></td></tr></table></figure><a id="more"></a><h3 id="2-2-安装"><a href="#2-2-安装" class="headerlink" title="2.2 安装"></a>2.2 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rpm -ivh mysql57-community-release-el7-11.noarch.rpm</div><div class="line"></div><div class="line">yum install mysql-community-server</div></pre></td></tr></table></figure><p>更多安装方式和细节请参照文章末尾的参考资料</p><h3 id="2-3-登陆"><a href="#2-3-登陆" class="headerlink" title="2.3 登陆"></a>2.3 登陆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 重启 MySQL 服务</div><div class="line">service mysqld restart</div><div class="line"></div><div class="line"># 获取临时的登陆密码</div><div class="line">grep &apos;temporary password&apos; /var/log/mysqld.log</div><div class="line"></div><div class="line"># 根据上一步获取的密码登陆 MySQL 服务端</div><div class="line">mysql -uroot -p</div></pre></td></tr></table></figure><h3 id="2-4-修改密码"><a href="#2-4-修改密码" class="headerlink" title="2.4 修改密码"></a>2.4 修改密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;新密码&apos;;</div><div class="line"></div><div class="line">flush privileges;</div></pre></td></tr></table></figure><p><strong>注意: MySQL 默认安装了 validate_password 插件，它要求设置的密码长度至少为 8 位数，且需要包含至少一个大写字母，一个小写字母，一个数字和一个特殊符号。</strong></p><p>原文如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MySQL&apos;s validate_password plugin is installed by default. </div><div class="line">This will require that passwords contain at least one upper case letter, </div><div class="line">one lower case letter, one digit, and one special character, and that the total password length</div><div class="line">is at least 8 characters.</div></pre></td></tr></table></figure><h2 id="三、卸载"><a href="#三、卸载" class="headerlink" title="三、卸载"></a>三、卸载</h2><h3 id="3-1-查看-MySQL-安装的相关信息"><a href="#3-1-查看-MySQL-安装的相关信息" class="headerlink" title="3.1 查看 MySQL 安装的相关信息"></a>3.1 查看 MySQL 安装的相关信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -qa | grep -i mysql</div></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# rpm -qa | grep -i mysql</div><div class="line">mysql-community-common-5.7.19-1.el7.x86_64</div><div class="line">mysql-community-client-5.7.19-1.el7.x86_64</div><div class="line">mysql57-community-release-el7-11.noarch</div><div class="line">mysql-community-server-5.7.19-1.el7.x86_64</div><div class="line">mysql-community-libs-5.7.19-1.el7.x86_64</div></pre></td></tr></table></figure><h3 id="3-2-卸载"><a href="#3-2-卸载" class="headerlink" title="3.2 卸载"></a>3.2 卸载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">rpm -ev mysql-community-server-5.7.19-1.el7.x86_64</div><div class="line"></div><div class="line">rpm -ev mysql-community-client-5.7.19-1.el7.x86_64</div><div class="line"></div><div class="line">rpm -ev mysql-community-libs-5.7.19-1.el7.x86_64</div><div class="line"></div><div class="line">rpm -ev mysql57-community-release-el7-11.noarch</div><div class="line"></div><div class="line">rpm -ev mysql-community-common-5.7.19-1.el7.x86_64</div></pre></td></tr></table></figure><h3 id="3-3-删除残余文件"><a href="#3-3-删除残余文件" class="headerlink" title="3.3 删除残余文件"></a>3.3 删除残余文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">rm -rf /var/lib/mysql</div><div class="line"></div><div class="line">rm -rf /usr/share/mysql</div><div class="line"></div><div class="line">rm -f /var/log/mysqld.log</div><div class="line"></div><div class="line">rm -f /etc/my.cnf</div></pre></td></tr></table></figure><h2 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h2><ul><li><a href="https://dev.mysql.com/doc/refman/5.7/en/linux-installation.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.7/en/linux-installation.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ow97db1io.bkt.clouddn.com/mysql-1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h2&gt;&lt;p&gt;闲暇之余在虚拟机安装了 Centos 7.2 系统，按照 &lt;a href=&quot;http://www.cnblogs.com/moonlightL/p/7265595.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《简单安装MySQL（RPM方式）》&lt;/a&gt; 这篇文章安装 MySQL ，发现由于包依赖的问题安装失败，于是索性在官网查询相关文档进行 MySQL 的安装。&lt;/p&gt;
&lt;h2 id=&quot;二、安装&quot;&gt;&lt;a href=&quot;#二、安装&quot; class=&quot;headerlink&quot; title=&quot;二、安装&quot;&gt;&lt;/a&gt;二、安装&lt;/h2&gt;&lt;h3 id=&quot;2-1-下载&quot;&gt;&lt;a href=&quot;#2-1-下载&quot; class=&quot;headerlink&quot; title=&quot;2.1 下载&quot;&gt;&lt;/a&gt;2.1 下载&lt;/h3&gt;&lt;p&gt;本次安装选择 &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/linux-installation-yum-repo.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Installing MySQL on Linux Using the MySQL Yum Repository&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; 方式&lt;/p&gt;
&lt;p&gt;在 &lt;a href=&quot;https://dev.mysql.com/downloads/repo/yum/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://dev.mysql.com/downloads/repo/yum/&lt;/a&gt; 选择需要安装的文件，笔者选择 MySQL 5.7 版本。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://www.extlight.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="http://www.extlight.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 基础入门</title>
    <link href="http://www.extlight.com/2017/09/27/Elasticsearch-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <id>http://www.extlight.com/2017/09/27/Elasticsearch-基础入门/</id>
    <published>2017-09-27T02:58:59.000Z</published>
    <updated>2017-09-28T01:41:38.403Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ow97db1io.bkt.clouddn.com/elasticSearch-15.jpg" alt=""></p><h2 id="一、什么是-ElasticSearch"><a href="#一、什么是-ElasticSearch" class="headerlink" title="一、什么是 ElasticSearch"></a>一、什么是 ElasticSearch</h2><p>ElasticSearch是一个基于 Lucene 的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 RESTful web 接口。Elasticsearch 是用 Java 开发的，并作为 Apache 许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。</p><a id="more"></a><h3 id="1-1-基础概念"><a href="#1-1-基础概念" class="headerlink" title="1.1 基础概念"></a>1.1 基础概念</h3><p>索引：含有相同属性的文档集合</p><p>类型：索引可以定义一个或多个类型，文档必须属于一个类型</p><p>文档：可以被索引的基础数据单位</p><p>分片：每个索引都有多个分片，每个分片都是 Lucene 索引</p><p>备份：拷贝一份分片就完成分片的备份</p><p><strong>形象比喻：</strong></p><p>百货大楼里有各式各样的商品，例如书籍、笔、水果等。书籍可以根据内容划分成不同种类，如科技类、教育类、悬疑推理等。悬疑推理类的小说中比较有名气的有《福尔摩斯探案集》、《白夜行》等。</p><p>百货大楼 –&gt; ElasticSearch 数据库</p><p>书籍     –&gt; 索引</p><p>悬疑推理 –&gt; 类型</p><p>白夜行   –&gt; 文档</p><h3 id="1-2-应用场景"><a href="#1-2-应用场景" class="headerlink" title="1.2 应用场景"></a>1.2 应用场景</h3><ul><li>海量数据分析引擎</li><li>站内搜索引擎</li><li>数据仓库</li></ul><h2 id="二、安装和配置"><a href="#二、安装和配置" class="headerlink" title="二、安装和配置"></a>二、安装和配置</h2><blockquote><p>本次测试使用一台 ip 为 192.168.2.41 的虚拟机（Centos7），建议使用 7.x 版本，笔者之前使用 6.x 启动服务时报出各种错误</p></blockquote><h3 id="2-1-依赖环境"><a href="#2-1-依赖环境" class="headerlink" title="2.1 依赖环境"></a>2.1 依赖环境</h3><p>JDK 和 NodeJS</p><h3 id="2-2-下载"><a href="#2-2-下载" class="headerlink" title="2.2 下载"></a>2.2 下载</h3><p>登陆 <a href="http://elastic.co/" target="_blank" rel="external">elasticSearch</a> 官网下载文件。</p><h3 id="2-3-安装"><a href="#2-3-安装" class="headerlink" title="2.3 安装"></a>2.3 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar -zxvf elasticsearch-5.6.1.tar.gz -C /usr</div><div class="line"></div><div class="line">cd elasticsearch-5.6.1</div></pre></td></tr></table></figure><p>elasticsearch 文件目录如下图：</p><p><img src="http://ow97db1io.bkt.clouddn.com/elasticSearch-1.jpg" alt=""></p><h3 id="2-4-启动"><a href="#2-4-启动" class="headerlink" title="2.4 启动"></a>2.4 启动</h3><p><strong><em>踩坑提醒 1：</em></strong></p><p>因为 Elasticsearch 可以执行脚本文件，为了安全性，默认不允许通过 root 用户启动服务。我们需要新创建用户名和用户组启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#增加 es 组</div><div class="line">groupadd es    </div><div class="line"></div><div class="line">#增加 es 用户并附加到 es 组</div><div class="line">useradd es -g es -p es       </div><div class="line"></div><div class="line">#给目录权限</div><div class="line">chown -R es:es elasticsearch-5.6.1    </div><div class="line"></div><div class="line">#使用es用户</div><div class="line">su es</div></pre></td></tr></table></figure><p><strong><em>踩坑提醒 2：</em></strong></p><p>默认情况下，Elasticsearch 只允许本机访问，如果需要远程访问，需要修改其配置文件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vim config/elasticsearch.yml </div><div class="line"></div><div class="line"># 去掉 network.host 前边的注释，将它的值改成0.0.0.0</div><div class="line">network.host: 0.0.0.0</div></pre></td></tr></table></figure><p><strong><em>踩坑提醒 3：</em></strong></p><p>在启动过程中，Centos 环境下可能还会报错，具体解决方案请参照文章末尾提供的资料</p><p>启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/elasticsearch</div></pre></td></tr></table></figure><p>通过浏览器访问 <a href="http://192.168.2.41:9200" target="_blank" rel="external">http://192.168.2.41:9200</a> ，当出现如下内容说明启动成功:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot; : &quot;OwUwJe-&quot;,</div><div class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</div><div class="line">  &quot;cluster_uuid&quot; : &quot;vanzxnpaRumdRKiYic3f5A&quot;,</div><div class="line">  &quot;version&quot; : &#123;</div><div class="line">    &quot;number&quot; : &quot;5.6.1&quot;,</div><div class="line">    &quot;build_hash&quot; : &quot;667b497&quot;,</div><div class="line">    &quot;build_date&quot; : &quot;2017-09-14T19:22:05.189Z&quot;,</div><div class="line">    &quot;build_snapshot&quot; : false,</div><div class="line">    &quot;lucene_version&quot; : &quot;6.6.1&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2-5-安装插件"><a href="#2-5-安装插件" class="headerlink" title="2.5 安装插件"></a>2.5 安装插件</h3><p>访问 <a href="http://192.168.2.41:9200" target="_blank" rel="external">http://192.168.2.41:9200</a> 查看内容显示效果不友好，因此，我们需要安装一个名为 elasticsearch-head 的插件，让内容显示效果比较舒适。</p><p>登陆 <a href="https://github.com" target="_blank" rel="external">GitHub</a> 网站，搜索 mobz/elasticsearch-head ，将其下载到本地。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/mobz/elasticsearch-head/archive/master.zip</div><div class="line"></div><div class="line">unzip master.zip</div><div class="line"></div><div class="line">cd elasticsearch-head-master</div><div class="line"></div><div class="line">npm install</div><div class="line"></div><div class="line">npm run start</div></pre></td></tr></table></figure><p>通过上述命令的操作，我们已经安装好 elasticsearch-head 插件。通过浏览器访问 <a href="http://192.168.2.41:9100，如下图" target="_blank" rel="external">http://192.168.2.41:9100，如下图</a>:</p><p><img src="http://ow97db1io.bkt.clouddn.com/elasticSearch-4.jpg" alt=""></p><p>图中我们发现 elasticsearch-head 插件和 Elasticsearch 服务并没有建立连接，所以我们还需要修改 Elasticsearch 的配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cd elasticsearch-5.6.1</div><div class="line"></div><div class="line">vim config/elasticsearch.yml</div><div class="line"></div><div class="line"># 在文件末尾添加 2 段配置</div><div class="line"></div><div class="line">http.cors.enabled: true</div><div class="line">http.cors.allow-origin: &quot;*&quot;</div></pre></td></tr></table></figure><p>保存文件后，分别起来 2 个程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">cd elasticsearch-5.6.1</div><div class="line"></div><div class="line"># 后台启动 elasticSearch 服务</div><div class="line">bin/elasticsearch -d</div><div class="line"></div><div class="line">cd elasticsearch-head-master</div><div class="line"></div><div class="line">npm run start</div></pre></td></tr></table></figure><p>通过浏览器访问 <a href="http://192.168.2.41:9100，如下图" target="_blank" rel="external">http://192.168.2.41:9100，如下图</a>:</p><p><img src="http://ow97db1io.bkt.clouddn.com/elasticSearch-5.jpg" alt=""></p><p>通过插件创建索引</p><p><img src="http://ow97db1io.bkt.clouddn.com/elasticSearch-13.jpg" alt=""></p><p>查看索引基本情况</p><p><img src="http://ow97db1io.bkt.clouddn.com/elasticSearch-14.jpg" alt=""></p><p><strong>该插件能直接对 Elasticsearch 的数据进行增删改查，因此存在安全性的问题。建议生产环境下不要使用该插件！</strong></p><h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><p>Elasticsearch 支持 RESTFUL 风格 API，其 API 基本格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://&lt;ip&gt;:&lt;port&gt;/&lt;索引&gt;/&lt;类型&gt;/&lt;文档id&gt;</div></pre></td></tr></table></figure><h3 id="3-1-创建-删除索引"><a href="#3-1-创建-删除索引" class="headerlink" title="3.1 创建/删除索引"></a>3.1 创建/删除索引</h3><p>为了方便测试，我们使用 POSTMAN 工具进行接口的请求。</p><p>创建一个非结构化的索引，需要使用 <strong>PUT</strong> 请求。例如创建一个名为 book 的索引。</p><p>执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[PUT] http://192.168.2.41:9200/book</div></pre></td></tr></table></figure></p><p>返回结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;acknowledged&quot;: true,</div><div class="line">    &quot;shards_acknowledged&quot;: true,</div><div class="line">    &quot;index&quot;: &quot;book&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建一个结构化的索引，如下图：</p><p><img src="http://ow97db1io.bkt.clouddn.com/elasticSearch-07.jpg" alt=""></p><p>删除一个索引，需要使用 <strong>DELETE</strong> 请求。</p><p>执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[DELETE] http://192.168.2.41:9200/book</div></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;acknowledged&quot;: true</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-2-插入数据"><a href="#3-2-插入数据" class="headerlink" title="3.2 插入数据"></a>3.2 插入数据</h3><p>插入指定 ID 的数据，需要使用 <strong>PUT</strong> 请求。如下图：</p><p><img src="http://ow97db1io.bkt.clouddn.com/elasticSearch-9.jpg" alt=""></p><p>插入不指定 ID 的数据，需要使用 <strong>POST</strong> 请求。如下图：</p><p><img src="http://ow97db1io.bkt.clouddn.com/elasticSearch-10.jpg" alt=""></p><h3 id="3-3-修改数据"><a href="#3-3-修改数据" class="headerlink" title="3.3 修改数据"></a>3.3 修改数据</h3><p>修改数据，需要使用 <strong>POST</strong> 请求，且 URL 需要添加 _update </p><p>执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[POST] http://192.168.2.41:9200/fruit/apple/1/_update</div></pre></td></tr></table></figure><p>请求参数（修改颜色）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;doc&quot;: &#123;</div><div class="line">        &quot;color&quot;: &quot;black&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;_index&quot;: &quot;fruit&quot;,</div><div class="line">    &quot;_type&quot;: &quot;apple&quot;,</div><div class="line">    &quot;_id&quot;: &quot;1&quot;,</div><div class="line">    &quot;_version&quot;: 7,</div><div class="line">    &quot;result&quot;: &quot;updated&quot;,</div><div class="line">    &quot;_shards&quot;: &#123;</div><div class="line">        &quot;total&quot;: 2,</div><div class="line">        &quot;successful&quot;: 1,</div><div class="line">        &quot;failed&quot;: 0</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-4-删除数据"><a href="#3-4-删除数据" class="headerlink" title="3.4 删除数据"></a>3.4 删除数据</h3><p>修改数据，需要使用 <strong>DELETE</strong> 请求。</p><p>执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[DELETE] http://192.168.2.41:9200/fruit/apple/1</div></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;found&quot;: true,</div><div class="line">    &quot;_index&quot;: &quot;fruit&quot;,</div><div class="line">    &quot;_type&quot;: &quot;apple&quot;,</div><div class="line">    &quot;_id&quot;: &quot;1&quot;,</div><div class="line">    &quot;_version&quot;: 8,</div><div class="line">    &quot;result&quot;: &quot;deleted&quot;,</div><div class="line">    &quot;_shards&quot;: &#123;</div><div class="line">        &quot;total&quot;: 2,</div><div class="line">        &quot;successful&quot;: 1,</div><div class="line">        &quot;failed&quot;: 0</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-5-查找数据"><a href="#3-5-查找数据" class="headerlink" title="3.5 查找数据"></a>3.5 查找数据</h3><p>查询指定ID的数据，需要使用 <strong>GET</strong> 请求。</p><p>执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[GET] http://192.168.2.41:9200/fruit/apple/AV69_4DDdZbC-YBdV-U3</div></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;_index&quot;: &quot;fruit&quot;,</div><div class="line">    &quot;_type&quot;: &quot;apple&quot;,</div><div class="line">    &quot;_id&quot;: &quot;AV69_4DDdZbC-YBdV-U3&quot;,</div><div class="line">    &quot;_version&quot;: 1,</div><div class="line">    &quot;found&quot;: true,</div><div class="line">    &quot;_source&quot;: &#123;</div><div class="line">        &quot;color&quot;: &quot;green&quot;,</div><div class="line">        &quot;weight&quot;: 1,</div><div class="line">        &quot;createTime&quot;: &quot;2017-09-26 19:05:26&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>条件查询，需要使用 <strong>POST</strong> 请求。</p><p>执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[POST] http://192.168.2.41:9200/fruit/apple/_search</div></pre></td></tr></table></figure><p>请求参数（查找 color = “green”）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;query&quot;: &#123;</div><div class="line">        &quot;match&quot;:&#123;</div><div class="line">            &quot;color&quot;: &quot;green&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;took&quot;: 8,</div><div class="line">    &quot;timed_out&quot;: false,</div><div class="line">    &quot;_shards&quot;: &#123;</div><div class="line">        &quot;total&quot;: 5,</div><div class="line">        &quot;successful&quot;: 5,</div><div class="line">        &quot;skipped&quot;: 0,</div><div class="line">        &quot;failed&quot;: 0</div><div class="line">    &#125;,</div><div class="line">    &quot;hits&quot;: &#123;</div><div class="line">        &quot;total&quot;: 1,</div><div class="line">        &quot;max_score&quot;: 0.2876821,</div><div class="line">        &quot;hits&quot;: [</div><div class="line">            &#123;</div><div class="line">                &quot;_index&quot;: &quot;fruit&quot;,</div><div class="line">                &quot;_type&quot;: &quot;apple&quot;,</div><div class="line">                &quot;_id&quot;: &quot;AV69_4DDdZbC-YBdV-U3&quot;,</div><div class="line">                &quot;_score&quot;: 0.2876821,</div><div class="line">                &quot;_source&quot;: &#123;</div><div class="line">                    &quot;color&quot;: &quot;green&quot;,</div><div class="line">                    &quot;weight&quot;: 1,</div><div class="line">                    &quot;createTime&quot;: &quot;2017-09-26 19:05:26&quot;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://blog.csdn.net/qq942477618/article/details/53414983" target="_blank" rel="external">http://blog.csdn.net/qq942477618/article/details/53414983</a>    解决问题方案</li><li><a href="http://blog.csdn.net/laotoumo/article/details/53890279" target="_blank" rel="external">http://blog.csdn.net/laotoumo/article/details/53890279</a>          解决问题方案</li><li><a href="http://blog.csdn.net/jiankunking/article/details/65448030" target="_blank" rel="external">http://blog.csdn.net/jiankunking/article/details/65448030</a>       解决问题方案</li><li><a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html</a></li><li><a href="http://www.cnblogs.com/ghj1976/p/5293250.html" target="_blank" rel="external">http://www.cnblogs.com/ghj1976/p/5293250.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ow97db1io.bkt.clouddn.com/elasticSearch-15.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、什么是-ElasticSearch&quot;&gt;&lt;a href=&quot;#一、什么是-ElasticSearch&quot; class=&quot;headerlink&quot; title=&quot;一、什么是 ElasticSearch&quot;&gt;&lt;/a&gt;一、什么是 ElasticSearch&lt;/h2&gt;&lt;p&gt;ElasticSearch是一个基于 Lucene 的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 RESTful web 接口。Elasticsearch 是用 Java 开发的，并作为 Apache 许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="http://www.extlight.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Elasticsearch" scheme="http://www.extlight.com/tags/Elasticsearch/"/>
    
      <category term="搜索" scheme="http://www.extlight.com/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>记一次跨域问题的解决方案</title>
    <link href="http://www.extlight.com/2017/09/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://www.extlight.com/2017/09/26/记一次跨域问题的解决方案/</id>
    <published>2017-09-26T02:45:28.000Z</published>
    <updated>2017-09-29T06:55:42.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>在公司空暇时间，笔者使用 AngularJS + SSM 方案编写一套权限控制系统。由于采用的是前后端分离的思想，前端页面服务启动的端口和后端服务启动端口不一致导致请求跨域问题的出现。在此，写下解决问题的流程。</p><h2 id="二、基础知识"><a href="#二、基础知识" class="headerlink" title="二、基础知识"></a>二、基础知识</h2><h3 id="2-1-什么是同源"><a href="#2-1-什么是同源" class="headerlink" title="2.1 什么是同源"></a>2.1 什么是同源</h3><p>URL 由协议、域名、端口和路径组成，如果两个 URL 的协议、域名和端口相同，则表示它们同源。</p><h3 id="2-2-什么是同源策略"><a href="#2-2-什么是同源策略" class="headerlink" title="2.2 什么是同源策略"></a>2.2 什么是同源策略</h3><p>浏览器的同源策略，限制了来自不同源的 document 或脚本，对当前 document 读取或设置某些属性。其目的是为了保证用户信息的安全，防止恶意的网站窃取数据。</p><p>另外，同源策略只对网页的 HTML 文档做了限制，对加载的其他静态资源如 javascript、css、图片等仍然认为属于同源。</p><h3 id="2-3-什么是跨域"><a href="#2-3-什么是跨域" class="headerlink" title="2.3 什么是跨域"></a>2.3 什么是跨域</h3><p>跨域，指的是浏览器不能执行其他网站的脚本。同源策略规定，AJAX 请求只能发给同源的网址，否则就报错。</p><blockquote><p>建议读者先浏览文章末尾提供的参考资料进一步了解跨域相关的内容，再结合本文案例思考和理解</p></blockquote><a id="more"></a><h2 id="三、解决案例"><a href="#三、解决案例" class="headerlink" title="三、解决案例"></a>三、解决案例</h2><p>CORS 是一个 W3C 标准，全称是”跨域资源共享”（Cross-origin resource sharing）。它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了 AJAX 只能同源使用的限制。</p><p>笔者采用 CORS 方案解决问题。</p><h3 id="3-1-前端页面设置"><a href="#3-1-前端页面设置" class="headerlink" title="3.1 前端页面设置"></a>3.1 前端页面设置</h3><h4 id="3-1-1-设置请求参数"><a href="#3-1-1-设置请求参数" class="headerlink" title="3.1.1 设置请求参数"></a>3.1.1 设置请求参数</h4><p>在 ajax 请求参数中添加 2 个参数设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xhrFields: &#123; <span class="attr">withCredentials</span>: <span class="literal">true</span> &#125;</div><div class="line">crossDomain: <span class="literal">true</span></div></pre></td></tr></table></figure><h4 id="3-1-2-源码演示"><a href="#3-1-2-源码演示" class="headerlink" title="3.1.2 源码演示"></a>3.1.2 源码演示</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$.ajaxSetup(&#123;</div><div class="line">    dataType: <span class="string">"json"</span>,</div><div class="line">    cache: <span class="literal">false</span>,</div><div class="line">    xhrFields: &#123; <span class="attr">withCredentials</span>: <span class="literal">true</span> &#125;,<span class="comment">//设置后，请求会携带cookie</span></div><div class="line">    crossDomain: <span class="literal">true</span>,</div><div class="line">    complete: <span class="function"><span class="keyword">function</span>(<span class="params">xhr</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (xhr.responseJSON) &#123;</div><div class="line">            <span class="keyword">if</span> (xhr.responseJSON.code == <span class="number">401</span>) &#123;</div><div class="line">                layer.msg(xhr.responseJSON.msg);</div><div class="line">                setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="built_in">window</span>.location.href = <span class="string">"login.html"</span>;</div><div class="line">                &#125;, <span class="number">1500</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            layer.msg(xhr.responseText);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="3-2-后端服务器设置"><a href="#3-2-后端服务器设置" class="headerlink" title="3.2 后端服务器设置"></a>3.2 后端服务器设置</h3><h4 id="3-2-1-设置跨域请求过滤器"><a href="#3-2-1-设置跨域请求过滤器" class="headerlink" title="3.2.1 设置跨域请求过滤器"></a>3.2.1 设置跨域请求过滤器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleCORSFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">        HttpServletResponse response = (HttpServletResponse) resp;</div><div class="line">        HttpServletRequest request=(HttpServletRequest)req;</div><div class="line">        <span class="comment">// 处理简单请求</span></div><div class="line">        <span class="comment">// 跨域请求默认不携带cookie,如果要携带cookie，需要设置下边2个响应头</span></div><div class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, request.getHeader(<span class="string">"Origin"</span>));<span class="comment">// 必选，所有有效的跨域响应都必须包含这个请求头, 没有的话会导致跨域请求失败</span></div><div class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);<span class="comment">//可选，此处设置为true,对应前端 xhr.withCredentials = true;</span></div><div class="line">        <span class="comment">//处理非简单请求</span></div><div class="line">        <span class="comment">//  非简单请求：浏览器会发送两个请求, 第一个请求(成为预检请求)会像服务器确定是否接受这个跨域请求, 第二个才是真正的发出请求. 浏览器自动的处理这两个请求, 同时预检请求也是可以被缓存的, 而不用每次请求都需要发送预检请求.</span></div><div class="line">        <span class="comment">//  预检请求是在实际的请求发出前先向服务器确认是否能够处理这个请求. 服务器应该检查上边两个请求头的值, 来判断这个请求是否有效.</span></div><div class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST,GET,OPTIONS,DELETE"</span>);<span class="comment">// 必选</span></div><div class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>,</div><div class="line">                <span class="string">"Origin,No-Cache,X-Requested-With,If-Modified-Since,"</span> +</div><div class="line">                        <span class="string">"Pragma,Last-Modified,Cache-Control,Expires,Content-Type,X-E4M-With,userId,token"</span>);</div><div class="line"></div><div class="line">        response.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"0"</span>);<span class="comment">// 可选,在每个请求前面都发送一个预检请求是很浪费资源的, 这个值允许你设置预检请求的缓存时间, 单位是秒.</span></div><div class="line">        response.setHeader(<span class="string">"XDomainRequestAllowed"</span>,<span class="string">"1"</span>);</div><div class="line">        chain.doFilter(req,resp);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3-2-2-配置-web-xml-文件"><a href="#3-2-2-配置-web-xml-文件" class="headerlink" title="3.2.2 配置 web.xml 文件"></a>3.2.2 配置 web.xml 文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>cors<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.light.system.web.filter.SimpleCORSFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>cors<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h2><ul><li><a href="http://lleohao.com/2017/08/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/" target="_blank" rel="external">http://lleohao.com/2017/08/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h2&gt;&lt;p&gt;在公司空暇时间，笔者使用 AngularJS + SSM 方案编写一套权限控制系统。由于采用的是前后端分离的思想，前端页面服务启动的端口和后端服务启动端口不一致导致请求跨域问题的出现。在此，写下解决问题的流程。&lt;/p&gt;
&lt;h2 id=&quot;二、基础知识&quot;&gt;&lt;a href=&quot;#二、基础知识&quot; class=&quot;headerlink&quot; title=&quot;二、基础知识&quot;&gt;&lt;/a&gt;二、基础知识&lt;/h2&gt;&lt;h3 id=&quot;2-1-什么是同源&quot;&gt;&lt;a href=&quot;#2-1-什么是同源&quot; class=&quot;headerlink&quot; title=&quot;2.1 什么是同源&quot;&gt;&lt;/a&gt;2.1 什么是同源&lt;/h3&gt;&lt;p&gt;URL 由协议、域名、端口和路径组成，如果两个 URL 的协议、域名和端口相同，则表示它们同源。&lt;/p&gt;
&lt;h3 id=&quot;2-2-什么是同源策略&quot;&gt;&lt;a href=&quot;#2-2-什么是同源策略&quot; class=&quot;headerlink&quot; title=&quot;2.2 什么是同源策略&quot;&gt;&lt;/a&gt;2.2 什么是同源策略&lt;/h3&gt;&lt;p&gt;浏览器的同源策略，限制了来自不同源的 document 或脚本，对当前 document 读取或设置某些属性。其目的是为了保证用户信息的安全，防止恶意的网站窃取数据。&lt;/p&gt;
&lt;p&gt;另外，同源策略只对网页的 HTML 文档做了限制，对加载的其他静态资源如 javascript、css、图片等仍然认为属于同源。&lt;/p&gt;
&lt;h3 id=&quot;2-3-什么是跨域&quot;&gt;&lt;a href=&quot;#2-3-什么是跨域&quot; class=&quot;headerlink&quot; title=&quot;2.3 什么是跨域&quot;&gt;&lt;/a&gt;2.3 什么是跨域&lt;/h3&gt;&lt;p&gt;跨域，指的是浏览器不能执行其他网站的脚本。同源策略规定，AJAX 请求只能发给同源的网址，否则就报错。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;建议读者先浏览文章末尾提供的参考资料进一步了解跨域相关的内容，再结合本文案例思考和理解&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="后端" scheme="http://www.extlight.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="跨域" scheme="http://www.extlight.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>jQuery 性能优化技巧</title>
    <link href="http://www.extlight.com/2017/09/23/jQuery-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"/>
    <id>http://www.extlight.com/2017/09/23/jQuery-性能优化技巧/</id>
    <published>2017-09-23T00:31:21.000Z</published>
    <updated>2017-09-28T01:50:55.313Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ow97db1io.bkt.clouddn.com/jQuery.jpg" alt=""></p><h2 id="一、使用最新版本-jQuery-类库"><a href="#一、使用最新版本-jQuery-类库" class="headerlink" title="一、使用最新版本 jQuery 类库"></a>一、使用最新版本 jQuery 类库</h2><h2 id="二、合理使用选择器"><a href="#二、合理使用选择器" class="headerlink" title="二、合理使用选择器"></a>二、合理使用选择器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 推荐使用</div><div class="line">$(<span class="string">"#id"</span>) </div><div class="line"></div><div class="line"># 可以使用</div><div class="line">$(<span class="string">"p"</span>),$(<span class="string">"span"</span>) </div><div class="line"></div><div class="line"># 可以使用</div><div class="line">$(<span class="string">".class"</span>) </div><div class="line"></div><div class="line"># 尽量避免</div><div class="line">$(<span class="string">"[attribute=value]"</span>)  </div><div class="line"></div><div class="line"># 尽量避免</div><div class="line">$(<span class="string">":hidden"</span>)</div></pre></td></tr></table></figure><a id="more"></a><h2 id="三、使用缓存对象"><a href="#三、使用缓存对象" class="headerlink" title="三、使用缓存对象"></a>三、使用缓存对象</h2><p>场景：修改某个按钮的文本和颜色</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 不好的写法</div><div class="line"></div><div class="line">$(<span class="string">"#btn"</span>).text(<span class="string">"重置"</span>);</div><div class="line"></div><div class="line">$(<span class="string">"#btn"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 优化的写法</div><div class="line"></div><div class="line"><span class="keyword">var</span> $btn = $(<span class="string">"#btn"</span>);</div><div class="line"></div><div class="line">$btn.text(<span class="string">"重置"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);</div></pre></td></tr></table></figure><h2 id="四、循环时减少对DOM的操作"><a href="#四、循环时减少对DOM的操作" class="headerlink" title="四、循环时减少对DOM的操作"></a>四、循环时减少对DOM的操作</h2><p>场景：往 &lt;ul&gt; 中添加 &lt;li&gt; 菜单项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 不好的写法</div><div class="line"></div><div class="line"><span class="keyword">var</span> $ul = $(<span class="string">"#menu"</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++) &#123;</div><div class="line">    $ul.append(<span class="string">"&lt;li&gt;菜单"</span>+i+<span class="string">"&lt;/li&gt;"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 优化的写法</div><div class="line"></div><div class="line"><span class="keyword">var</span> $ul = $(<span class="string">"#menu"</span>);</div><div class="line"><span class="keyword">var</span> html = <span class="string">""</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++) &#123;</div><div class="line">    html += <span class="string">"&lt;li&gt;菜单"</span>+i+<span class="string">"&lt;/li&gt;"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$ul.append(html);</div></pre></td></tr></table></figure><h2 id="五、使用事件代理"><a href="#五、使用事件代理" class="headerlink" title="五、使用事件代理"></a>五、使用事件代理</h2><p>场景：给 &lt;ul&gt; 里的所有 &lt;li&gt; 绑定点击变色事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 不好的写法</div><div class="line"></div><div class="line">$(<span class="string">"ul li"</span>).on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   $(<span class="keyword">this</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>); </div><div class="line">&#125;);</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 优化的写法</div><div class="line"></div><div class="line">$(<span class="string">"ul li"</span>).on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> $obj = $(e.target);</div><div class="line">   $obj.css(<span class="string">"color"</span>,<span class="string">"red"</span>); </div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="六、将代码转成-jQuery-插件"><a href="#六、将代码转成-jQuery-插件" class="headerlink" title="六、将代码转成 jQuery 插件"></a>六、将代码转成 jQuery 插件</h2><h2 id="七、使用-join-拼接字符串"><a href="#七、使用-join-拼接字符串" class="headerlink" title="七、使用 join() 拼接字符串"></a>七、使用 join() 拼接字符串</h2><p>第四点的案例中，代码还可以进行优化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $ul = $(<span class="string">"#menu"</span>);</div><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++) &#123;</div><div class="line">   arr.push(<span class="string">"&lt;li&gt;菜单"</span>+i+<span class="string">"&lt;/li&gt;"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$ul.append(arr.join(<span class="string">""</span>);</div></pre></td></tr></table></figure><h2 id="八、合理利用-HTML5-的-data-属性"><a href="#八、合理利用-HTML5-的-data-属性" class="headerlink" title="八、合理利用 HTML5 的 data 属性"></a>八、合理利用 HTML5 的 data 属性</h2><p>使用 data-* 属性来嵌入自定义数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">data-age</span>=<span class="string">"26"</span> <span class="attr">data-gender</span>=<span class="string">"男"</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> user = $(<span class="string">"#user"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> age = user.data(<span class="string">"age"</span>);</div><div class="line"><span class="keyword">var</span> gender = $(<span class="string">"#user"</span>).data(<span class="string">"gender"</span>);</div></pre></td></tr></table></figure><h2 id="九、尽量使用原生的-JS-方法"><a href="#九、尽量使用原生的-JS-方法" class="headerlink" title="九、尽量使用原生的 JS 方法"></a>九、尽量使用原生的 JS 方法</h2><p>第五点的案例中，可以如下优化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"ul li"</span>).on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> $obj = $(e.target);</div><div class="line">   $obj.get(<span class="number">0</span>).style.color = <span class="string">"red"</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="十、压缩-JS-代码"><a href="#十、压缩-JS-代码" class="headerlink" title="十、压缩 JS 代码"></a>十、压缩 JS 代码</h2><p><strong><em>如有更多优化技巧，后续补充……</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ow97db1io.bkt.clouddn.com/jQuery.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、使用最新版本-jQuery-类库&quot;&gt;&lt;a href=&quot;#一、使用最新版本-jQuery-类库&quot; class=&quot;headerlink&quot; title=&quot;一、使用最新版本 jQuery 类库&quot;&gt;&lt;/a&gt;一、使用最新版本 jQuery 类库&lt;/h2&gt;&lt;h2 id=&quot;二、合理使用选择器&quot;&gt;&lt;a href=&quot;#二、合理使用选择器&quot; class=&quot;headerlink&quot; title=&quot;二、合理使用选择器&quot;&gt;&lt;/a&gt;二、合理使用选择器&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# 推荐使用&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&quot;#id&quot;&lt;/span&gt;) &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 可以使用&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&quot;p&quot;&lt;/span&gt;),$(&lt;span class=&quot;string&quot;&gt;&quot;span&quot;&lt;/span&gt;) &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 可以使用&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&quot;.class&quot;&lt;/span&gt;) &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 尽量避免&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&quot;[attribute=value]&quot;&lt;/span&gt;)  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 尽量避免&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&quot;:hidden&quot;&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.extlight.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="http://www.extlight.com/tags/Javascript/"/>
    
      <category term="jQuery" scheme="http://www.extlight.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>UML 类图介绍</title>
    <link href="http://www.extlight.com/2017/09/20/UML-%E7%B1%BB%E5%9B%BE%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.extlight.com/2017/09/20/UML-类图介绍/</id>
    <published>2017-09-20T07:05:07.000Z</published>
    <updated>2017-09-28T01:52:06.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><p>类图是描述类、接口以及类之间关系的图。</p><h3 id="1-1-作用"><a href="#1-1-作用" class="headerlink" title="1.1 作用"></a>1.1 作用</h3><p>类图常用来描述业务或软件系统的组成、结构和关系</p><h3 id="1-2-类描述"><a href="#1-2-类描述" class="headerlink" title="1.2 类描述"></a>1.2 类描述</h3><p>类在 UML 中通常以实线矩形框表示。<br>矩形框中有若干分隔框，分别包含类名、属性、行为等元素。如下图：<br><img src="http://ow97db1io.bkt.clouddn.com/uml-1.jpg" alt=""></p><p><strong>类名：图中蓝色背景的字，如果字体为斜体，表名该类为抽象类</strong><br><strong>属性：类名下边的区域</strong><br><strong>行为：属性下边的区域</strong><br><strong>可见性：属性和行为前边的 “+”、”-“ 和 “#”（图中未标注） 分别表示 public、private 和 protected</strong></p><a id="more"></a><h3 id="1-3-接口描述"><a href="#1-3-接口描述" class="headerlink" title="1.3 接口描述"></a>1.3 接口描述</h3><p>接口的类图表述与类大致相同，不同的是接口名要添加 Interface 标识，且行为的可见性必须用 “+” 表示。如下图：<br><img src="http://ow97db1io.bkt.clouddn.com/uml-2.jpg" alt=""></p><h2 id="二、类图中的六种关系"><a href="#二、类图中的六种关系" class="headerlink" title="二、类图中的六种关系"></a>二、类图中的六种关系</h2><ul><li>继承</li><li>实现</li><li>关联</li><li>依赖</li><li>组合</li><li>聚合</li></ul><h3 id="2-1-继承（Inherit）"><a href="#2-1-继承（Inherit）" class="headerlink" title="2.1 继承（Inherit）"></a>2.1 继承（Inherit）</h3><p>继承是面向对象语言的三个特性之一。子类继承父类，子类可以使用父类所有非私有的属性和方法，其UML类图表示如下：<br><img src="http://ow97db1io.bkt.clouddn.com/uml-03.jpg" alt=""></p><p>UML 类图中继承关系使用<strong>空心三角形+实线</strong>表示。</p><h3 id="2-2-实现（Realization）"><a href="#2-2-实现（Realization）" class="headerlink" title="2.2 实现（Realization）"></a>2.2 实现（Realization）</h3><p>实现与继承类似，实现类继承接口中的方法，但是方法必须由实现类自己实现，其UML类图表示如下：<br><img src="http://ow97db1io.bkt.clouddn.com/uml-4.jpg" alt=""></p><p>UML 类图中实现关系使用<strong>空心三角形+虚线</strong>表示。</p><h3 id="2-3-关联（Association）"><a href="#2-3-关联（Association）" class="headerlink" title="2.3 关联（Association）"></a>2.3 关联（Association）</h3><p>指类与类之间的关系，它使得一个类知道另一个类的属性和方法。关联可以是双向的，也可以是单向的。</p><p>用 Java 代码表示企鹅只存在在南极，与气候有关系：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Penguin</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Climate climate;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其UML类图表示如下：<br><img src="http://ow97db1io.bkt.clouddn.com/uml-5.jpg" alt=""></p><p>UML 类图中关联关系使用<strong>实线箭头</strong>表示。</p><h3 id="2-4-依赖（Dependency）"><a href="#2-4-依赖（Dependency）" class="headerlink" title="2.4 依赖（Dependency）"></a>2.4 依赖（Dependency）</h3><p>指类与类之间的联接，依赖关系表示一个类依赖于另一个类的定义。一般而言，依赖关系在Java语言中体现为局域变量、方法的形参，或者对静态方法的调用。</p><p>用 Java 代码表示程序员工作需要用到电脑：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Programmer</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(Computer computer)</span> </span>&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其UML类图表示如下：<br><img src="http://ow97db1io.bkt.clouddn.com/uml-6.jpg" alt=""></p><p>UML 类图中依赖关系使用<strong>虚线箭头</strong>表示。</p><h3 id="2-5-组合（Composition）"><a href="#2-5-组合（Composition）" class="headerlink" title="2.5 组合（Composition）"></a>2.5 组合（Composition）</h3><p>关联关系的一种，表示一种强的“拥有”关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样。</p><p>用 Java 表示每只鸟都有翅膀：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bird</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Wing wing;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bird</span><span class="params">()</span> </span>&#123;</div><div class="line">        wing = <span class="keyword">new</span> Wing();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其UML类图表示如下：<br><img src="http://ow97db1io.bkt.clouddn.com/uml-7.jpg" alt=""></p><p>UML 类图中组合关系使用<strong>实心菱形实线</strong>表示。</p><h3 id="2-6-聚合（Aggressgation）"><a href="#2-6-聚合（Aggressgation）" class="headerlink" title="2.6 聚合（Aggressgation）"></a>2.6 聚合（Aggressgation）</h3><p>关联关系的一种，表示一种弱的“拥有”关系，体现的是A对象可以包含B对象，但是B对象不是A对象的一部分。</p><p>用 Java 代码表示大雁是群居动物，每只大雁都属于一个雁群，一个雁群可以有多只大雁：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WildGooseAggregate</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;WildGoose&gt; wideGooses;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其UML类图表示如下：<br><img src="http://ow97db1io.bkt.clouddn.com/uml-8.jpg" alt=""></p><p>UML 类图中聚合关系使用<strong>空心菱形实线</strong>表示。</p><h2 id="三、参考资料"><a href="#三、参考资料" class="headerlink" title="三、参考资料"></a>三、参考资料</h2><ul><li><a href="http://www.cnblogs.com/javawebsoa/archive/2013/08/01/3230737.html" target="_blank" rel="external">http://www.cnblogs.com/javawebsoa/archive/2013/08/01/3230737.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、基本概念&quot;&gt;&lt;a href=&quot;#一、基本概念&quot; class=&quot;headerlink&quot; title=&quot;一、基本概念&quot;&gt;&lt;/a&gt;一、基本概念&lt;/h2&gt;&lt;p&gt;类图是描述类、接口以及类之间关系的图。&lt;/p&gt;
&lt;h3 id=&quot;1-1-作用&quot;&gt;&lt;a href=&quot;#1-1-作用&quot; class=&quot;headerlink&quot; title=&quot;1.1 作用&quot;&gt;&lt;/a&gt;1.1 作用&lt;/h3&gt;&lt;p&gt;类图常用来描述业务或软件系统的组成、结构和关系&lt;/p&gt;
&lt;h3 id=&quot;1-2-类描述&quot;&gt;&lt;a href=&quot;#1-2-类描述&quot; class=&quot;headerlink&quot; title=&quot;1.2 类描述&quot;&gt;&lt;/a&gt;1.2 类描述&lt;/h3&gt;&lt;p&gt;类在 UML 中通常以实线矩形框表示。&lt;br&gt;矩形框中有若干分隔框，分别包含类名、属性、行为等元素。如下图：&lt;br&gt;&lt;img src=&quot;http://ow97db1io.bkt.clouddn.com/uml-1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类名：图中蓝色背景的字，如果字体为斜体，表名该类为抽象类&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;属性：类名下边的区域&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;行为：属性下边的区域&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;可见性：属性和行为前边的 “+”、”-“ 和 “#”（图中未标注） 分别表示 public、private 和 protected&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://www.extlight.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="UML" scheme="http://www.extlight.com/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>原生 Javascript 编写贪吃蛇</title>
    <link href="http://www.extlight.com/2017/09/18/%E5%8E%9F%E7%94%9F-Javascript-%E7%BC%96%E5%86%99%E8%B4%AA%E5%90%83%E8%9B%87/"/>
    <id>http://www.extlight.com/2017/09/18/原生-Javascript-编写贪吃蛇/</id>
    <published>2017-09-18T06:45:23.000Z</published>
    <updated>2017-09-28T01:57:16.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简单介绍"><a href="#一、简单介绍" class="headerlink" title="一、简单介绍"></a>一、简单介绍</h2><h3 id="1-1-效果展示"><a href="#1-1-效果展示" class="headerlink" title="1.1 效果展示"></a>1.1 效果展示</h3><p><img src="http://ow97db1io.bkt.clouddn.com/snake-1.gif" alt=""> </p><h3 id="1-2-实现思路"><a href="#1-2-实现思路" class="headerlink" title="1.2 实现思路"></a>1.2 实现思路</h3><ul><li>地图：创建一个 800px * 400px 的 div 元素来充当地图；地图可以看作由 40 x 20 个小 div（宽高都为20px） 元素组成。</li><li>食物：创建一个 宽高都为 20px 的 div 充当食物；食物通过 Math.random 分配随机位置。</li><li>蛇：创建一个二维数组充当蛇；二维数组存放蛇节（3个蛇身和1个蛇头），一维数组存放蛇节的位置、颜色和下一个蛇节对象。</li><li>蛇移动：先移动蛇尾，再移动蛇头。当前移动的蛇节位置为下一个蛇节未移动时的位置。</li></ul><h3 id="1-3-设计技术点"><a href="#1-3-设计技术点" class="headerlink" title="1.3 设计技术点"></a>1.3 设计技术点</h3><p>DOM操作、面向对象、事件操作和间隔函数setInterval</p><a id="more"></a><h3 id="1-4-项目结构"><a href="#1-4-项目结构" class="headerlink" title="1.4 项目结构"></a>1.4 项目结构</h3><p><img src="http://ow97db1io.bkt.clouddn.com/snake-2.jpg" alt=""></p><h2 id="二、实现步骤"><a href="#二、实现步骤" class="headerlink" title="二、实现步骤"></a>二、实现步骤</h2><h3 id="2-1-绘制地图"><a href="#2-1-绘制地图" class="headerlink" title="2.1 绘制地图"></a>2.1 绘制地图</h3><h4 id="2-1-1-style-css-文件"><a href="#2-1-1-style-css-文件" class="headerlink" title="2.1.1 style.css 文件"></a>2.1.1 style.css 文件</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.map</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">background-color</span>: pink;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2-1-2-map-js-文件"><a href="#2-1-2-map-js-文件" class="headerlink" title="2.1.2 map.js 文件"></a>2.1.2 map.js 文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">Map</span> = <span class="function"><span class="keyword">function</span>(<span class="params">width,height</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.width = width;</div><div class="line">    <span class="keyword">this</span>.height = height;</div><div class="line">    <span class="keyword">this</span>.id = <span class="string">"map"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">Map</span>.prototype.showMap = <span class="function"><span class="keyword">function</span>(<span class="params">containerId</span>) </span>&#123;</div><div class="line">    <span class="comment">// 创建地图并设置样式</span></div><div class="line">    <span class="keyword">var</span> mapDiv = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">    mapDiv.style.width = <span class="keyword">this</span>.width +<span class="string">"px"</span>;</div><div class="line">    mapDiv.style.height = <span class="keyword">this</span>.height + <span class="string">"px"</span>;</div><div class="line">    mapDiv.className = <span class="keyword">this</span>.id;</div><div class="line">    mapDiv.id = <span class="keyword">this</span>.id;</div><div class="line">    <span class="comment">// 将创建的地图添加到页面中</span></div><div class="line">    <span class="built_in">document</span>.getElementById(containerId).appendChild(mapDiv);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2-1-3-game-js-文件创建地图"><a href="#2-1-3-game-js-文件创建地图" class="headerlink" title="2.1.3 game.js 文件创建地图"></a>2.1.3 game.js 文件创建地图</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Game = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">Game.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="number">800</span>, <span class="number">400</span>); <span class="comment">// 长宽数值必须是2的整数倍</span></div><div class="line">    map.showMap(<span class="string">"container"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2-1-4-index-html-文件开始游戏"><a href="#2-1-4-index-html-文件开始游戏" class="headerlink" title="2.1.4 index.html 文件开始游戏"></a>2.1.4 index.html 文件开始游戏</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>贪吃蛇<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/style.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/map.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/food.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/snake.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/game.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> game = <span class="keyword">new</span> Game();</span></div><div class="line"><span class="undefined">        game.start();</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="2-1-5-效果"><a href="#2-1-5-效果" class="headerlink" title="2.1.5 效果"></a>2.1.5 效果</h4><p><img src="http://ow97db1io.bkt.clouddn.com/snake-3.jpg" alt="">   </p><h3 id="2-2-绘制食物"><a href="#2-2-绘制食物" class="headerlink" title="2.2 绘制食物"></a>2.2 绘制食物</h3><h4 id="2-2-1-food-js-文件"><a href="#2-2-1-food-js-文件" class="headerlink" title="2.2.1 food.js 文件"></a>2.2.1 food.js 文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Food = <span class="function"><span class="keyword">function</span>(<span class="params">map</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.size = <span class="number">20</span>; <span class="comment">// 食物大小</span></div><div class="line">    <span class="keyword">this</span>.xFood = <span class="number">0</span>; <span class="comment">// 食物x坐标</span></div><div class="line">    <span class="keyword">this</span>.yFood = <span class="number">0</span>; <span class="comment">// 食物y坐标</span></div><div class="line">    <span class="keyword">this</span>.map = map; <span class="comment">// 坐在地图</span></div><div class="line">    <span class="keyword">this</span>.foodDiv = <span class="literal">null</span>; <span class="comment">// 地图中的食物</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Food.prototype.showFood = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 此处判断确保地图中只有一个食物</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.foodDiv === <span class="literal">null</span>) &#123;</div><div class="line">        <span class="comment">// 创建食物并设置样式</span></div><div class="line">        <span class="keyword">this</span>.foodDiv = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">        <span class="keyword">this</span>.foodDiv.style.width = <span class="keyword">this</span>.foodDiv.style.height = <span class="keyword">this</span>.size + <span class="string">"px"</span>;</div><div class="line">        <span class="keyword">this</span>.foodDiv.style.backgroundColor = <span class="string">"red"</span>;</div><div class="line">        <span class="keyword">this</span>.foodDiv.style.position = <span class="string">"absolute"</span>;</div><div class="line">        <span class="comment">// 将食物添加到地图上</span></div><div class="line">        <span class="built_in">document</span>.getElementById(<span class="keyword">this</span>.map.id).appendChild(<span class="keyword">this</span>.foodDiv);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 食物步进值：20px</span></div><div class="line">    <span class="comment">// 食物权值坐标：X轴（0 - map.width/this.size）Y轴（0 - map.height/this.size）</span></div><div class="line">    <span class="keyword">this</span>.xFood = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (<span class="keyword">this</span>.map.width / <span class="keyword">this</span>.size));</div><div class="line">    <span class="keyword">this</span>.yFood = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (<span class="keyword">this</span>.map.height / <span class="keyword">this</span>.size));</div><div class="line">    <span class="comment">// 设置食物在地图的位置</span></div><div class="line">    <span class="keyword">this</span>.foodDiv.style.left = <span class="keyword">this</span>.xFood * <span class="keyword">this</span>.size + <span class="string">"px"</span>;</div><div class="line">    <span class="keyword">this</span>.foodDiv.style.top = <span class="keyword">this</span>.yFood * <span class="keyword">this</span>.size + <span class="string">"px"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2-2-2-game-js-文件创建地图和食物对象"><a href="#2-2-2-game-js-文件创建地图和食物对象" class="headerlink" title="2.2.2 game.js 文件创建地图和食物对象"></a>2.2.2 game.js 文件创建地图和食物对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Game = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">Game.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="number">800</span>, <span class="number">400</span>); <span class="comment">// 长宽数值必须是2的整数倍</span></div><div class="line">    map.showMap(<span class="string">"container"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> food = <span class="keyword">new</span> Food(map);</div><div class="line">    food.showFood();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2-2-3-效果"><a href="#2-2-3-效果" class="headerlink" title="2.2.3 效果"></a>2.2.3 效果</h4><p><img src="http://ow97db1io.bkt.clouddn.com/snake-4.jpg" alt=""></p><h3 id="2-3-绘制小蛇"><a href="#2-3-绘制小蛇" class="headerlink" title="2.3 绘制小蛇"></a>2.3 绘制小蛇</h3><h4 id="2-3-1-snake-js-文件"><a href="#2-3-1-snake-js-文件" class="headerlink" title="2.3.1 snake.js 文件"></a>2.3.1 snake.js 文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Snake = <span class="function"><span class="keyword">function</span>(<span class="params">food</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.size = <span class="number">20</span>;</div><div class="line">    <span class="comment">// 初始化蛇&#123;x坐标，y坐标，颜色，蛇节对象&#125;</span></div><div class="line">    <span class="keyword">this</span>.snakeBody = [</div><div class="line">        &#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">1</span>,<span class="attr">color</span>:<span class="string">"black"</span>,<span class="attr">obj</span>:<span class="literal">null</span>&#125;,<span class="comment">// 蛇身</span></div><div class="line">        &#123;<span class="attr">x</span>:<span class="number">1</span>,<span class="attr">y</span>:<span class="number">1</span>,<span class="attr">color</span>:<span class="string">"black"</span>,<span class="attr">obj</span>:<span class="literal">null</span>&#125;,<span class="comment">// 蛇身</span></div><div class="line">        &#123;<span class="attr">x</span>:<span class="number">2</span>,<span class="attr">y</span>:<span class="number">1</span>,<span class="attr">color</span>:<span class="string">"black"</span>,<span class="attr">obj</span>:<span class="literal">null</span>&#125;,<span class="comment">// 蛇身</span></div><div class="line">        &#123;<span class="attr">x</span>:<span class="number">3</span>,<span class="attr">y</span>:<span class="number">1</span>,<span class="attr">color</span>:<span class="string">"white"</span>,<span class="attr">obj</span>:<span class="literal">null</span>&#125;<span class="comment">// 蛇头</span></div><div class="line">    ];</div><div class="line">    <span class="keyword">this</span>.direction = <span class="string">"right"</span>; <span class="comment">// 蛇移动方向</span></div><div class="line">    <span class="keyword">this</span>.food = food; <span class="comment">//食物</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 显示蛇</span></div><div class="line">Snake.prototype.showSnake = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//遍历蛇节，依次创建</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.snakeBody.length; i++)&#123;</div><div class="line">        <span class="comment">//此处判断为了避免重复创建蛇节</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.snakeBody[i].obj == <span class="literal">null</span>) &#123;</div><div class="line">            <span class="comment">// 创建蛇节div，设置样式</span></div><div class="line">            <span class="keyword">this</span>.snakeBody[i].obj = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line">            <span class="keyword">this</span>.snakeBody[i].obj.style.width = <span class="keyword">this</span>.snakeBody[i].obj.style.height = <span class="keyword">this</span>.size + <span class="string">"px"</span>;</div><div class="line">            <span class="keyword">this</span>.snakeBody[i].obj.style.backgroundColor = <span class="keyword">this</span>.snakeBody[i].color;</div><div class="line">            <span class="keyword">this</span>.snakeBody[i].obj.style.position = <span class="string">"absolute"</span>;</div><div class="line">            <span class="comment">// 追加蛇节</span></div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="keyword">this</span>.food.map.id).appendChild(<span class="keyword">this</span>.snakeBody[i].obj);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 设置蛇在地图中的位置</span></div><div class="line">        <span class="keyword">this</span>.snakeBody[i].obj.style.left = <span class="keyword">this</span>.snakeBody[i].x * <span class="keyword">this</span>.size + <span class="string">"px"</span>;</div><div class="line">        <span class="keyword">this</span>.snakeBody[i].obj.style.top = <span class="keyword">this</span>.snakeBody[i].y * <span class="keyword">this</span>.size + <span class="string">"px"</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2-3-2-game-js-文件创建地图、食物和蛇对象"><a href="#2-3-2-game-js-文件创建地图、食物和蛇对象" class="headerlink" title="2.3.2 game.js 文件创建地图、食物和蛇对象"></a>2.3.2 game.js 文件创建地图、食物和蛇对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Game = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">Game.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="number">800</span>, <span class="number">400</span>); <span class="comment">// 长宽数值必须是2的整数倍</span></div><div class="line">    map.showMap(<span class="string">"container"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> food = <span class="keyword">new</span> Food(map);</div><div class="line">    food.showFood();</div><div class="line"></div><div class="line">    <span class="keyword">var</span> snake = <span class="keyword">new</span> Snake(food);</div><div class="line">    snake.showSnake();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2-3-3-效果"><a href="#2-3-3-效果" class="headerlink" title="2.3.3 效果"></a>2.3.3 效果</h4><p><img src="http://ow97db1io.bkt.clouddn.com/snake-5.jpg" alt=""></p><h3 id="2-4-小蛇移动"><a href="#2-4-小蛇移动" class="headerlink" title="2.4 小蛇移动"></a>2.4 小蛇移动</h3><h4 id="2-4-1-snake-js-文件，添加move方法"><a href="#2-4-1-snake-js-文件，添加move方法" class="headerlink" title="2.4.1 snake.js 文件，添加move方法"></a>2.4.1 snake.js 文件，添加move方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 移动蛇</span></div><div class="line">Snake.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 非蛇头蛇节（当前蛇节的新坐标 为 下个蛇节的旧坐标）</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="keyword">this</span>.snakeBody.length <span class="number">-1</span>; i++) &#123;</div><div class="line">        <span class="keyword">this</span>.snakeBody[i].x = <span class="keyword">this</span>.snakeBody[i+<span class="number">1</span>].x;</div><div class="line">        <span class="keyword">this</span>.snakeBody[i].y = <span class="keyword">this</span>.snakeBody[i+<span class="number">1</span>].y;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 设置蛇头位置</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.direction == <span class="string">"right"</span>) &#123;</div><div class="line">        <span class="comment">// 蛇头x坐标累加</span></div><div class="line">        <span class="keyword">this</span>.snakeBody[<span class="keyword">this</span>.snakeBody.length - <span class="number">1</span>].x += <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.direction == <span class="string">"left"</span>) &#123;</div><div class="line">        <span class="comment">// 蛇头x坐标累加</span></div><div class="line">        <span class="keyword">this</span>.snakeBody[<span class="keyword">this</span>.snakeBody.length - <span class="number">1</span>].x -= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.direction == <span class="string">"up"</span>) &#123;</div><div class="line">        <span class="comment">// 蛇头x坐标累加</span></div><div class="line">        <span class="keyword">this</span>.snakeBody[<span class="keyword">this</span>.snakeBody.length - <span class="number">1</span>].y -= <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.direction == <span class="string">"down"</span>) &#123;</div><div class="line">        <span class="comment">// 蛇头x坐标累加</span></div><div class="line">        <span class="keyword">this</span>.snakeBody[<span class="keyword">this</span>.snakeBody.length - <span class="number">1</span>].y += <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.showSnake();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2-4-2-game-js-文件使用-interval-函数调用蛇对象的move方法"><a href="#2-4-2-game-js-文件使用-interval-函数调用蛇对象的move方法" class="headerlink" title="2.4.2 game.js 文件使用 interval 函数调用蛇对象的move方法"></a>2.4.2 game.js 文件使用 interval 函数调用蛇对象的move方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Game = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">Game.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="number">800</span>, <span class="number">400</span>); <span class="comment">// 长宽数值必须是2的整数倍</span></div><div class="line">    map.showMap(<span class="string">"container"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> food = <span class="keyword">new</span> Food(map);</div><div class="line">    food.showFood();</div><div class="line"></div><div class="line">    <span class="keyword">var</span> snake = <span class="keyword">new</span> Snake(food);</div><div class="line">    snake.showSnake();</div><div class="line"></div><div class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        snake.move();</div><div class="line">    &#125;, <span class="number">100</span>);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2-5-控制小蛇移动方向"><a href="#2-5-控制小蛇移动方向" class="headerlink" title="2.5 控制小蛇移动方向"></a>2.5 控制小蛇移动方向</h3><p>game.js 添加键盘按下事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Game = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">Game.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="number">800</span>, <span class="number">400</span>); <span class="comment">// 长宽数值必须是2的整数倍</span></div><div class="line">    map.showMap(<span class="string">"container"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> food = <span class="keyword">new</span> Food(map);</div><div class="line">    food.showFood();</div><div class="line"></div><div class="line">    <span class="keyword">var</span> snake = <span class="keyword">new</span> Snake(food);</div><div class="line">    snake.showSnake();</div><div class="line"></div><div class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        snake.move();</div><div class="line">    &#125;, <span class="number">100</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 键盘控制</span></div><div class="line">    <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (e.keyCode) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">37</span>:</div><div class="line">                snake.direction = <span class="string">"left"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">38</span>:</div><div class="line">                snake.direction = <span class="string">"up"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">39</span>:</div><div class="line">                snake.direction = <span class="string">"right"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">40</span>:</div><div class="line">                snake.direction = <span class="string">"down"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        snake.showSnake();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2-6-小蛇吃食物"><a href="#2-6-小蛇吃食物" class="headerlink" title="2.6 小蛇吃食物"></a>2.6 小蛇吃食物</h3><p>snake.js 文件在 move 方法   this.showSnake() 之前添加逻辑判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 蛇头坐标</span></div><div class="line"><span class="keyword">var</span> xSnakeHead = <span class="keyword">this</span>.snakeBody[<span class="keyword">this</span>.snakeBody.length <span class="number">-1</span>].x;</div><div class="line"><span class="keyword">var</span> ySnakeHead = <span class="keyword">this</span>.snakeBody[<span class="keyword">this</span>.snakeBody.length <span class="number">-1</span>].y;</div><div class="line"></div><div class="line"><span class="comment">//判断蛇吃否吃到食物</span></div><div class="line"><span class="keyword">if</span> (xSnakeHead == <span class="keyword">this</span>.food.xFood &amp;&amp; ySnakeHead == <span class="keyword">this</span>.food.yFood) &#123;</div><div class="line">    <span class="comment">// 增加蛇长</span></div><div class="line">    <span class="keyword">var</span> newBody = &#123;<span class="attr">x</span>:<span class="keyword">this</span>.snakeBody[<span class="number">0</span>].x,<span class="attr">y</span>:<span class="keyword">this</span>.snakeBody[<span class="number">0</span>].y,<span class="attr">color</span>:<span class="string">"black"</span>,<span class="attr">obj</span>:<span class="literal">null</span>&#125;;</div><div class="line">    <span class="keyword">this</span>.snakeBody.unshift(newBody);</div><div class="line">    <span class="comment">// 食物消失，再随机生成</span></div><div class="line">    <span class="keyword">this</span>.food.showFood();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2-7-小蛇移动范围"><a href="#2-7-小蛇移动范围" class="headerlink" title="2.7 小蛇移动范围"></a>2.7 小蛇移动范围</h3><p>snake.js 文件在 move 方法   this.showSnake() 之前添加逻辑判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 控制小蛇移动范围</span></div><div class="line"><span class="keyword">if</span> (xSnakeHead &lt; <span class="number">0</span> || xSnakeHead &gt;= <span class="keyword">this</span>.food.map.width/<span class="keyword">this</span>.size</div><div class="line">    || ySnakeHead &lt;<span class="number">0</span> || ySnakeHead &gt;= <span class="keyword">this</span>.food.map.height/<span class="keyword">this</span>.size) &#123;</div><div class="line">    alert(<span class="string">"游戏结束!"</span>);</div><div class="line">    <span class="built_in">window</span>.location.reload();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不能吃自己</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;<span class="keyword">this</span>.snakeBody.length <span class="number">-1</span>; j++) &#123;</div><div class="line">    <span class="comment">// 蛇头坐标 = 蛇身坐标，游戏结束</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.snakeBody[j].x == xSnakeHead &amp;&amp; <span class="keyword">this</span>.snakeBody[j].y == ySnakeHead) &#123;</div><div class="line">        alert(<span class="string">"游戏结束!"</span>);</div><div class="line">        <span class="built_in">window</span>.location.reload();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="三、源码下载"><a href="#三、源码下载" class="headerlink" title="三、源码下载"></a>三、源码下载</h2><p><a href="https://github.com/moonlightL/snake" target="_blank" rel="external">贪吃蛇</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、简单介绍&quot;&gt;&lt;a href=&quot;#一、简单介绍&quot; class=&quot;headerlink&quot; title=&quot;一、简单介绍&quot;&gt;&lt;/a&gt;一、简单介绍&lt;/h2&gt;&lt;h3 id=&quot;1-1-效果展示&quot;&gt;&lt;a href=&quot;#1-1-效果展示&quot; class=&quot;headerlink&quot; title=&quot;1.1 效果展示&quot;&gt;&lt;/a&gt;1.1 效果展示&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://ow97db1io.bkt.clouddn.com/snake-1.gif&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;h3 id=&quot;1-2-实现思路&quot;&gt;&lt;a href=&quot;#1-2-实现思路&quot; class=&quot;headerlink&quot; title=&quot;1.2 实现思路&quot;&gt;&lt;/a&gt;1.2 实现思路&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;地图：创建一个 800px * 400px 的 div 元素来充当地图；地图可以看作由 40 x 20 个小 div（宽高都为20px） 元素组成。&lt;/li&gt;
&lt;li&gt;食物：创建一个 宽高都为 20px 的 div 充当食物；食物通过 Math.random 分配随机位置。&lt;/li&gt;
&lt;li&gt;蛇：创建一个二维数组充当蛇；二维数组存放蛇节（3个蛇身和1个蛇头），一维数组存放蛇节的位置、颜色和下一个蛇节对象。&lt;/li&gt;
&lt;li&gt;蛇移动：先移动蛇尾，再移动蛇头。当前移动的蛇节位置为下一个蛇节未移动时的位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-3-设计技术点&quot;&gt;&lt;a href=&quot;#1-3-设计技术点&quot; class=&quot;headerlink&quot; title=&quot;1.3 设计技术点&quot;&gt;&lt;/a&gt;1.3 设计技术点&lt;/h3&gt;&lt;p&gt;DOM操作、面向对象、事件操作和间隔函数setInterval&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.extlight.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="http://www.extlight.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>学习 Git 玩转 GitHub</title>
    <link href="http://www.extlight.com/2017/09/18/%E5%AD%A6%E4%B9%A0Git%E7%8E%A9%E8%BD%ACGitHub/"/>
    <id>http://www.extlight.com/2017/09/18/学习Git玩转GitHub/</id>
    <published>2017-09-18T03:26:50.000Z</published>
    <updated>2017-09-28T02:05:14.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、基本了解"><a href="#一、基本了解" class="headerlink" title="一、基本了解"></a>一、基本了解</h2><h3 id="1-1-什么是版本控制系统"><a href="#1-1-什么是版本控制系统" class="headerlink" title="1.1 什么是版本控制系统"></a>1.1 什么是版本控制系统</h3><p>版本控制系统是一种记录一个或若干个文件内容变化，以便将来查阅特定版本修订情况的系统。</p><h3 id="1-2-什么是-Git"><a href="#1-2-什么是-Git" class="headerlink" title="1.2 什么是 Git"></a>1.2 什么是 Git</h3><p>Git是一个免费、开源的版本控制软件</p><h3 id="1-3-什么是-Github"><a href="#1-3-什么是-Github" class="headerlink" title="1.3 什么是 Github"></a>1.3 什么是 Github</h3><p>Github是全球最大的社交编程及代码托管网站</p><h3 id="1-4-Git-和-GitHub-的关系"><a href="#1-4-Git-和-GitHub-的关系" class="headerlink" title="1.4 Git 和 GitHub 的关系"></a>1.4 Git 和 GitHub 的关系</h3><ul><li>Git是版本控制软件</li><li>Github是项目代码托管的平台，借助git来管理项目代码</li></ul><h3 id="1-5-什么要学习-GitHub"><a href="#1-5-什么要学习-GitHub" class="headerlink" title="1.5 什么要学习 GitHub"></a>1.5 什么要学习 GitHub</h3><ul><li>学习优秀的开源项目</li><li>关注行业前辈了解最新的行业动态</li></ul><a id="more"></a><h2 id="二、使用-GitHub"><a href="#二、使用-GitHub" class="headerlink" title="二、使用 GitHub"></a>二、使用 GitHub</h2><h3 id="2-1-目的"><a href="#2-1-目的" class="headerlink" title="2.1 目的"></a>2.1 目的</h3><p>借助 GitHub 托管项目代码</p><h3 id="2-2-GitHub-中的基本概念"><a href="#2-2-GitHub-中的基本概念" class="headerlink" title="2.2 GitHub 中的基本概念"></a>2.2 GitHub 中的基本概念</h3><h4 id="2-2-1-Repository（仓库）"><a href="#2-2-1-Repository（仓库）" class="headerlink" title="2.2.1 Repository（仓库）"></a>2.2.1 Repository（仓库）</h4><p>仓库用来存放项目代码，每个项目对应一个仓库，多个开源项目则有多个仓库</p><h4 id="2-2-2-Watch（关注）"><a href="#2-2-2-Watch（关注）" class="headerlink" title="2.2.2 Watch（关注）"></a>2.2.2 Watch（关注）</h4><p>关注项目，当项目更新可以接收到通知</p><h4 id="2-2-3-Star（收藏）"><a href="#2-2-3-Star（收藏）" class="headerlink" title="2.2.3 Star（收藏）"></a>2.2.3 Star（收藏）</h4><p>收藏项目，方便下次查看</p><h4 id="2-2-4-Fork（复制克隆项目）"><a href="#2-2-4-Fork（复制克隆项目）" class="headerlink" title="2.2.4 Fork（复制克隆项目）"></a>2.2.4 Fork（复制克隆项目）</h4><p>复制克隆别人的项目到自己的 Github 仓库中，独立存在，任何操作都不会对原先的仓库造成影响。</p><h4 id="2-2-5-Issue（问题讨论）"><a href="#2-2-5-Issue（问题讨论）" class="headerlink" title="2.2.5 Issue（问题讨论）"></a>2.2.5 Issue（问题讨论）</h4><p>发现代码 bug 时，发起消息与作者讨论</p><h4 id="2-2-6-Pull-Request（发起请求）"><a href="#2-2-6-Pull-Request（发起请求）" class="headerlink" title="2.2.6 Pull Request（发起请求）"></a>2.2.6 Pull Request（发起请求）</h4><p>当 fork 仓库，修改仓库的 bug 或 添加新功能后，想同步到原先的仓库时，发起请求给原仓库作者，让其对代码审核与合并。</p><h3 id="2-3-注册-GitHub-账号"><a href="#2-3-注册-GitHub-账号" class="headerlink" title="2.3 注册 GitHub 账号"></a>2.3 注册 GitHub 账号</h3><p>第一步：登陆官网 <a href="https://github.com" target="_blank" rel="external">GitHub官网</a>，如下图：</p><p><img src="http://ow97db1io.bkt.clouddn.com/github-1.jpg" alt="image"></p><p>第二步：点击首页右上角的 “Sign up”，进入如下页面：</p><p><img src="http://ow97db1io.bkt.clouddn.com/github-2.jpg" alt="image"></p><p>填写好信息，点击 “Create an account”，来到如下页面：</p><p><img src="http://ow97db1io.bkt.clouddn.com/github-3.jpg" alt="image"></p><p>GitHub已经帮我们设置好默认选项，我们只管点击左下角绿色按钮即可。</p><p>当看到下边的界面时，我们就注册好账号了：</p><p><img src="http://ow97db1io.bkt.clouddn.com/github-4.jpg" alt="image"></p><h3 id="2-4-创建仓库-创建新项目"><a href="#2-4-创建仓库-创建新项目" class="headerlink" title="2.4 创建仓库/创建新项目"></a>2.4 创建仓库/创建新项目</h3><p>点击上图 “Start a project” 按钮创建项目（仓库）。但是，由于我们刚注册好账号，并没有对邮件地址进行合法校验。所以会出现如下界面：</p><p><img src="http://ow97db1io.bkt.clouddn.com/github-5.jpg" alt="image"></p><p>点击 红色框住的链接，GitHub 会跳转页面且重新发送一封邮件让我们进行对邮箱地址的校验。如图：</p><p><img src="http://ow97db1io.bkt.clouddn.com/github-6.jpg" alt="image"></p><p>笔者使用的是 qq 邮箱，点击右下角提示进入到 qq 邮箱管理界面，如图：</p><p><img src="http://ow97db1io.bkt.clouddn.com/github-7.jpg" alt="image"></p><p>点击 “Verify email address” 连接进行校验，浏览器会打开新标签提示邮箱地址校验成功。</p><p><img src="http://ow97db1io.bkt.clouddn.com/github-8.jpg" alt="image"></p><p>此时，我们点击 “Start a project” 就能真正创建项目了。此时，我们会来到如下界面：</p><p><img src="http://ow97db1io.bkt.clouddn.com/github-9.jpg" alt="image"></p><p>填写好基本信息，点击 “Create a repository”，来到仓库管理界面：</p><p><img src="http://ow97db1io.bkt.clouddn.com/github-10.jpg" alt="image"></p><p>根据图中的标注，我们可以根据自己的需求管理仓库。</p><h3 id="2-5-开源项目贡献流程"><a href="#2-5-开源项目贡献流程" class="headerlink" title="2.5 开源项目贡献流程"></a>2.5 开源项目贡献流程</h3><h4 id="2-5-1-新建Issue"><a href="#2-5-1-新建Issue" class="headerlink" title="2.5.1 新建Issue"></a>2.5.1 新建Issue</h4><p>提交使用问题、建议或者想法</p><h4 id="2-5-2-Pull-Request"><a href="#2-5-2-Pull-Request" class="headerlink" title="2.5.2 Pull Request"></a>2.5.2 Pull Request</h4><ol><li>fork 项目</li><li>修改自己仓库的项目代码</li><li>新建 pull request</li><li>等待作者操作审核</li></ol><h2 id="三、使用-Git"><a href="#三、使用-Git" class="headerlink" title="三、使用 Git"></a>三、使用 Git</h2><h3 id="3-1-目的"><a href="#3-1-目的" class="headerlink" title="3.1 目的"></a>3.1 目的</h3><p>通过 Git 管理 GitHub 托管项目代码</p><h3 id="3-2-下载安装"><a href="#3-2-下载安装" class="headerlink" title="3.2 下载安装"></a>3.2 下载安装</h3><p>登陆 <a href="https://www.git-scm.com/download/win" target="_blank" rel="external">https://www.git-scm.com/download/win</a> 下载</p><p>安装过程傻瓜化方式（在选择安装时，选择 Git Bash 和 Git GUI ，其余默认选项即可），步骤省略。</p><h3 id="3-3-Git-工作原理"><a href="#3-3-Git-工作原理" class="headerlink" title="3.3 Git 工作原理"></a>3.3 Git 工作原理</h3><p>对于任何一个文件，在 Git 内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。已提交表示该文件已经被安全地保存在本地数据库中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。</p><p>由此我们看到 Git 管理项目时，文件流转的三个工作区域：Git 的工作目录，暂存区域，以及本地仓库。</p><p> <img src="http://ow97db1io.bkt.clouddn.com/git-1.png" alt="image"></p><p> 每个项目都有一个 Git 目录（如果 git clone 出来的话，就是其中 .git 的目录）。它是 Git 用来保存元数据和对象数据库的地方。该目录非常重要，每次克隆镜像仓库的时候，实际拷贝的就是这个目录里面的数据。</p><p> 从项目中取出某个版本的所有文件和目录，用以开始后续工作的叫做工作目录。这些文件实际上都是从 Git 目录中的压缩对象数据库中提取出来的，接下来就可以在工作目录中对这些文件进行编辑。</p><p> 所谓的暂存区域只不过是个简单的文件，一般都放在 Git 目录中。有时候人们会把这个文件叫做索引文件，不过标准说法还是叫暂存区域。</p><p> 基本的 Git 工作流程如下：</p><ul><li>在工作目录中修改某些文件</li><li>对修改后的文件进行快照，然后保存到暂存区域</li><li>提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。</li></ul><h3 id="3-4-Git-基本命令"><a href="#3-4-Git-基本命令" class="headerlink" title="3.4 Git 基本命令"></a>3.4 Git 基本命令</h3><h4 id="3-4-1-git-init"><a href="#3-4-1-git-init" class="headerlink" title="3.4.1 git init"></a>3.4.1 git init</h4><p>初始化工作目录，在当前目录下会创建一个名为 .git 的隐藏文件夹。</p><h4 id="3-4-2-git-add"><a href="#3-4-2-git-add" class="headerlink" title="3.4.2 git add"></a>3.4.2 git add</h4><p>创建或编辑文件后，执行该命令，将文件添加到暂存区</p><h4 id="3-4-3-git-commit"><a href="#3-4-3-git-commit" class="headerlink" title="3.4.3 git commit"></a>3.4.3 git commit</h4><p>将暂存区的文件推送到仓库中</p><h4 id="3-4-4-git-status"><a href="#3-4-4-git-status" class="headerlink" title="3.4.4 git status"></a>3.4.4 git status</h4><p>列出当前目录所有还没有被 Git 管理的文件和被 Git 管理且被修改但还未提交(git commit)的文件</p><h4 id="3-4-5-git-fetch"><a href="#3-4-5-git-fetch" class="headerlink" title="3.4.5 git fetch"></a>3.4.5 git fetch</h4><p>检测远程仓库所有分支</p><h4 id="3-4-6-git-checkout"><a href="#3-4-6-git-checkout" class="headerlink" title="3.4.6 git checkout"></a>3.4.6 git checkout</h4><p>切换分支</p><h4 id="3-4-7-git-branch"><a href="#3-4-7-git-branch" class="headerlink" title="3.4.7 git branch"></a>3.4.7 git branch</h4><p>查看当前所在分支</p><h4 id="3-4-8-git-rm"><a href="#3-4-8-git-rm" class="headerlink" title="3.4.8 git rm"></a>3.4.8 git rm</h4><p>删除仓库中的文件</p><h4 id="3-4-9-git-clone"><a href="#3-4-9-git-clone" class="headerlink" title="3.4.9 git clone"></a>3.4.9 git clone</h4><p>克隆远程仓库</p><h4 id="3-4-10-git-push"><a href="#3-4-10-git-push" class="headerlink" title="3.4.10 git push"></a>3.4.10 git push</h4><p>同步本地仓库到远程仓库</p><h3 id="3-5-Git-管理远程仓库"><a href="#3-5-Git-管理远程仓库" class="headerlink" title="3.5 Git 管理远程仓库"></a>3.5 Git 管理远程仓库</h3><p>Git 连接和管理 GitHub 上的文件，为了安全性，需要设置公钥。</p><p>之前的步骤我们安装了 Git，打开 Git 安装目录下的 Git Bash ，键入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;GitHub邮箱地址&quot;</div></pre></td></tr></table></figure><p>命令执行后会提示输入信息，我们不用填写，直接回车。最终会在系统 “C:/Users/用户名/.ssh/“ 目录中生成 rsa 和 rsa.pub 文件。</p><p>打开 rsa.pub 文件复制里边的所有内容。</p><p>回到 GitHub 中，按照如下图操作：</p><p><img src="http://ow97db1io.bkt.clouddn.com/github-11.jpg" alt="image"></p><p>最后我们进行测试，在 Git Bash 中键入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure><p>如果出现 “Hi xxx! You’ve successfully authenticated” 字样，说明我们配置成功了。</p><p><img src="http://ow97db1io.bkt.clouddn.com/git-2.jpg" alt="image"></p><p>下边我们模拟场景运用 Git 命令将文件提交到 GitHub 的仓库中。</p><p><strong>场景一：非 clone 方式</strong><br>该场景下，我们没有对远程仓库进行关联，需要手动初始化 .git 文件夹</p><p>在 “E:\demo\git\test1”（自定义） 中，使用 Git Bash 或 CMD 键入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line"></div><div class="line">echo &quot;hello world&quot; &gt; test.txt</div><div class="line"></div><div class="line">git add .</div><div class="line"></div><div class="line">git status</div><div class="line"></div><div class="line">git commit -m &quot;first commit&quot;</div><div class="line"></div><div class="line">#添加需要连接的远程仓库地址（关联远程仓库）</div><div class="line">git remote add origin git@github.com:bluesky960/test.git </div><div class="line"></div><div class="line">git fetch </div><div class="line"></div><div class="line"># 切换到 master 分支</div><div class="line">git checkout master </div><div class="line"></div><div class="line">git branch </div><div class="line"></div><div class="line">git push origin master</div></pre></td></tr></table></figure><p>此时，在 Github 的 test 仓库中会多出 test.txt 文件。</p><p><strong>场景二：clone 方式</strong></p><p>在 “E:\demo\git\test2”（自定义） 中，使用 Git Bash 或 CMD 键入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># 执行 clone 操作会在当前目录中创建 .git 文件夹，关联远程仓库</div><div class="line">git clone git@github.com:bluesky960/test.git</div><div class="line"></div><div class="line">cd test</div><div class="line"></div><div class="line">echo &quot;clone hello world&quot; &gt; test2.txt</div><div class="line"></div><div class="line">git add .</div><div class="line"></div><div class="line">git commit -m &quot;add file&quot;</div><div class="line"></div><div class="line">git push</div></pre></td></tr></table></figure><p>此时，在 Github 的 test 仓库中会多出 test2.txt 文件。</p><p><strong>为了防止每次同步文件都需要输入账号和密码，我们需要进特殊配置</strong></p><p>打开 Git Bash 窗口，键入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;GitHub用户名&quot;</div><div class="line">    </div><div class="line">git config --global user.email &quot;GitHub邮箱地址&quot;</div></pre></td></tr></table></figure><p><strong>踩坑提醒</strong></p><p>在执行 “git remote add origin” 命令时，后边跟着是 SSH 类型的仓库地址，否则，在每次 git push 时都要输入账号和密码！</p><h2 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h2><ul><li><a href="http://www.nowamagic.net/academy/detail/48160210" target="_blank" rel="external">http://www.nowamagic.net/academy/detail/48160210</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、基本了解&quot;&gt;&lt;a href=&quot;#一、基本了解&quot; class=&quot;headerlink&quot; title=&quot;一、基本了解&quot;&gt;&lt;/a&gt;一、基本了解&lt;/h2&gt;&lt;h3 id=&quot;1-1-什么是版本控制系统&quot;&gt;&lt;a href=&quot;#1-1-什么是版本控制系统&quot; class=&quot;headerlink&quot; title=&quot;1.1 什么是版本控制系统&quot;&gt;&lt;/a&gt;1.1 什么是版本控制系统&lt;/h3&gt;&lt;p&gt;版本控制系统是一种记录一个或若干个文件内容变化，以便将来查阅特定版本修订情况的系统。&lt;/p&gt;
&lt;h3 id=&quot;1-2-什么是-Git&quot;&gt;&lt;a href=&quot;#1-2-什么是-Git&quot; class=&quot;headerlink&quot; title=&quot;1.2 什么是 Git&quot;&gt;&lt;/a&gt;1.2 什么是 Git&lt;/h3&gt;&lt;p&gt;Git是一个免费、开源的版本控制软件&lt;/p&gt;
&lt;h3 id=&quot;1-3-什么是-Github&quot;&gt;&lt;a href=&quot;#1-3-什么是-Github&quot; class=&quot;headerlink&quot; title=&quot;1.3 什么是 Github&quot;&gt;&lt;/a&gt;1.3 什么是 Github&lt;/h3&gt;&lt;p&gt;Github是全球最大的社交编程及代码托管网站&lt;/p&gt;
&lt;h3 id=&quot;1-4-Git-和-GitHub-的关系&quot;&gt;&lt;a href=&quot;#1-4-Git-和-GitHub-的关系&quot; class=&quot;headerlink&quot; title=&quot;1.4 Git 和 GitHub 的关系&quot;&gt;&lt;/a&gt;1.4 Git 和 GitHub 的关系&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Git是版本控制软件&lt;/li&gt;
&lt;li&gt;Github是项目代码托管的平台，借助git来管理项目代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-5-什么要学习-GitHub&quot;&gt;&lt;a href=&quot;#1-5-什么要学习-GitHub&quot; class=&quot;headerlink&quot; title=&quot;1.5 什么要学习 GitHub&quot;&gt;&lt;/a&gt;1.5 什么要学习 GitHub&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;学习优秀的开源项目&lt;/li&gt;
&lt;li&gt;关注行业前辈了解最新的行业动态&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="其他" scheme="http://www.extlight.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Git" scheme="http://www.extlight.com/tags/Git/"/>
    
      <category term="GitHub" scheme="http://www.extlight.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>简单介绍</title>
    <link href="http://www.extlight.com/2017/09/15/%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.extlight.com/2017/09/15/简单介绍/</id>
    <published>2017-09-15T08:21:17.000Z</published>
    <updated>2017-09-28T02:16:36.284Z</updated>
    
    <content type="html"><![CDATA[<p><strong>新博客上线</strong></p><p>之前在<a href="http://www.cnblogs.com/moonlightL/" target="_blank" rel="external">博客园</a>写博客，但是由于其排版和样式不够友好，因此笔者搭建新博客系统。以后就在这里博客。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;新博客上线&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之前在&lt;a href=&quot;http://www.cnblogs.com/moonlightL/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;博客园&lt;/a&gt;写博客，但是由于其排版和样式不够友好，因此
      
    
    </summary>
    
    
      <category term="其他" scheme="http://www.extlight.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
</feed>
