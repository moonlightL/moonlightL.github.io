[{"title":"原生 Javascript 编写贪吃蛇","date":"2017-09-18T06:45:23.000Z","path":"2017/09/18/原生-Javascript-编写贪吃蛇/","text":"简单介绍效果展示 实现思路 地图：创建一个 800px * 400px 的 div 元素来充当地图；地图可以看作由 40 x 20 个小 div（宽高都为20px） 元素组成。 食物：创建一个 宽高都为 20px 的 div 充当食物；食物通过 Math.random 分配随机位置。 蛇：创建一个二维数组充当蛇；二维数组存放蛇节（3个蛇身和1个蛇头），一维数组存放蛇节的位置、颜色和下一个蛇节对象。 蛇移动：先移动蛇尾，再移动蛇头。当前移动的蛇节位置为下一个蛇节未移动时的位置。 设计技术点DOM操作、面向对象、事件操作和间隔函数setInterval 项目结构 实现步骤绘制地图style.css 文件1234567891011html,body &#123; margin:0; padding: 0;&#125;.map &#123; margin: 100px auto; text-align: center; background-color: pink; position: relative;&#125; map.js 文件12345678910111213141516var Map = function(width,height) &#123; this.width = width; this.height = height; this.id = \"map\";&#125;Map.prototype.showMap = function(containerId) &#123; // 创建地图并设置样式 var mapDiv = document.createElement(\"div\"); mapDiv.style.width = this.width +\"px\"; mapDiv.style.height = this.height + \"px\"; mapDiv.className = this.id; mapDiv.id = this.id; // 将创建的地图添加到页面中 document.getElementById(containerId).appendChild(mapDiv);&#125; game.js 文件创建地图12345678var Game = function() &#123;&#125;Game.prototype.start = function() &#123; var map = new Map(800, 400); // 长宽数值必须是2的整数倍 map.showMap(\"container\");&#125; index.html 文件开始游戏123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html lang=\"zh\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;贪吃蛇&lt;/title&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"css/style.css\"&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"container\"&gt;&lt;/div&gt; &lt;script type=\"text/javascript\" src=\"js/map.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\" src=\"js/food.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\" src=\"js/snake.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\" src=\"js/game.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\"&gt; window.onload = function() &#123; var game = new Game(); game.start(); &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 效果 绘制食物food.js 文件12345678910111213141516171819202122232425262728var Food = function(map) &#123; this.size = 20; // 食物大小 this.xFood = 0; // 食物x坐标 this.yFood = 0; // 食物y坐标 this.map = map; // 坐在地图 this.foodDiv = null; // 地图中的食物&#125;Food.prototype.showFood = function() &#123; // 此处判断确保地图中只有一个食物 if (this.foodDiv === null) &#123; // 创建食物并设置样式 this.foodDiv = document.createElement(\"div\"); this.foodDiv.style.width = this.foodDiv.style.height = this.size + \"px\"; this.foodDiv.style.backgroundColor = \"red\"; this.foodDiv.style.position = \"absolute\"; // 将食物添加到地图上 document.getElementById(this.map.id).appendChild(this.foodDiv); &#125; // 食物步进值：20px // 食物权值坐标：X轴（0 - map.width/this.size）Y轴（0 - map.height/this.size） this.xFood = Math.floor(Math.random() * (this.map.width / this.size)); this.yFood = Math.floor(Math.random() * (this.map.height / this.size)); // 设置食物在地图的位置 this.foodDiv.style.left = this.xFood * this.size + \"px\"; this.foodDiv.style.top = this.yFood * this.size + \"px\";&#125; game.js 文件创建地图和食物对象1234567891011var Game = function() &#123;&#125;Game.prototype.start = function() &#123; var map = new Map(800, 400); // 长宽数值必须是2的整数倍 map.showMap(\"container\"); var food = new Food(map); food.showFood();&#125; 效果 绘制小蛇snake.js 文件123456789101112131415161718192021222324252627282930313233var Snake = function(food) &#123; this.size = 20; // 初始化蛇&#123;x坐标，y坐标，颜色，蛇节对象&#125; this.snakeBody = [ &#123;x:0,y:1,color:\"black\",obj:null&#125;,// 蛇身 &#123;x:1,y:1,color:\"black\",obj:null&#125;,// 蛇身 &#123;x:2,y:1,color:\"black\",obj:null&#125;,// 蛇身 &#123;x:3,y:1,color:\"white\",obj:null&#125;// 蛇头 ]; this.direction = \"right\"; // 蛇移动方向 this.food = food; //食物&#125;// 显示蛇Snake.prototype.showSnake = function() &#123; //遍历蛇节，依次创建 for (var i = 0; i &lt; this.snakeBody.length; i++)&#123; //此处判断为了避免重复创建蛇节 if (this.snakeBody[i].obj == null) &#123; // 创建蛇节div，设置样式 this.snakeBody[i].obj = document.createElement(\"div\"); this.snakeBody[i].obj.style.width = this.snakeBody[i].obj.style.height = this.size + \"px\"; this.snakeBody[i].obj.style.backgroundColor = this.snakeBody[i].color; this.snakeBody[i].obj.style.position = \"absolute\"; // 追加蛇节 document.getElementById(this.food.map.id).appendChild(this.snakeBody[i].obj); &#125; // 设置蛇在地图中的位置 this.snakeBody[i].obj.style.left = this.snakeBody[i].x * this.size + \"px\"; this.snakeBody[i].obj.style.top = this.snakeBody[i].y * this.size + \"px\"; &#125;&#125; game.js 文件创建地图、食物和蛇对象123456789101112131415var Game = function() &#123;&#125;Game.prototype.start = function() &#123; var map = new Map(800, 400); // 长宽数值必须是2的整数倍 map.showMap(\"container\"); var food = new Food(map); food.showFood(); var snake = new Snake(food); snake.showSnake();&#125; 效果 小蛇移动snake.js 文件，添加move方法12345678910111213141516171819202122232425262728// 移动蛇Snake.prototype.move = function() &#123; // 非蛇头蛇节（当前蛇节的新坐标 为 下个蛇节的旧坐标） for (var i=0; i&lt;this.snakeBody.length -1; i++) &#123; this.snakeBody[i].x = this.snakeBody[i+1].x; this.snakeBody[i].y = this.snakeBody[i+1].y; &#125; // 设置蛇头位置 if (this.direction == \"right\") &#123; // 蛇头x坐标累加 this.snakeBody[this.snakeBody.length - 1].x += 1; &#125; if (this.direction == \"left\") &#123; // 蛇头x坐标累加 this.snakeBody[this.snakeBody.length - 1].x -= 1; &#125; if (this.direction == \"up\") &#123; // 蛇头x坐标累加 this.snakeBody[this.snakeBody.length - 1].y -= 1 &#125; if (this.direction == \"down\") &#123; // 蛇头x坐标累加 this.snakeBody[this.snakeBody.length - 1].y += 1; &#125; this.showSnake();&#125; game.js 文件使用 interval 函数调用蛇对象的move方法12345678910111213141516171819var Game = function() &#123;&#125;Game.prototype.start = function() &#123; var map = new Map(800, 400); // 长宽数值必须是2的整数倍 map.showMap(\"container\"); var food = new Food(map); food.showFood(); var snake = new Snake(food); snake.showSnake(); setInterval(function() &#123; snake.move(); &#125;, 100);&#125; 控制小蛇移动方向game.js 添加键盘按下事件12345678910111213141516171819202122232425262728293031323334353637var Game = function() &#123;&#125;Game.prototype.start = function() &#123; var map = new Map(800, 400); // 长宽数值必须是2的整数倍 map.showMap(\"container\"); var food = new Food(map); food.showFood(); var snake = new Snake(food); snake.showSnake(); setInterval(function() &#123; snake.move(); &#125;, 100); // 键盘控制 document.onkeydown = function(e) &#123; switch (e.keyCode) &#123; case 37: snake.direction = \"left\"; break; case 38: snake.direction = \"up\"; break; case 39: snake.direction = \"right\"; break; case 40: snake.direction = \"down\"; break; &#125; snake.showSnake(); &#125;&#125; 小蛇吃食物snake.js 文件在 move 方法 this.showSnake() 之前添加逻辑判断123456789101112// 蛇头坐标var xSnakeHead = this.snakeBody[this.snakeBody.length -1].x;var ySnakeHead = this.snakeBody[this.snakeBody.length -1].y;//判断蛇吃否吃到食物if (xSnakeHead == this.food.xFood &amp;&amp; ySnakeHead == this.food.yFood) &#123; // 增加蛇长 var newBody = &#123;x:this.snakeBody[0].x,y:this.snakeBody[0].y,color:\"black\",obj:null&#125;; this.snakeBody.unshift(newBody); // 食物消失，再随机生成 this.food.showFood();&#125; 小蛇移动范围snake.js 文件在 move 方法 this.showSnake() 之前添加逻辑判断123456789101112131415// 控制小蛇移动范围if (xSnakeHead &lt; 0 || xSnakeHead &gt;= this.food.map.width/this.size || ySnakeHead &lt;0 || ySnakeHead &gt;= this.food.map.height/this.size) &#123; alert(\"游戏结束!\"); window.location.reload();&#125;// 不能吃自己for (var j=0; j&lt;this.snakeBody.length -1; j++) &#123; // 蛇头坐标 = 蛇身坐标，游戏结束 if (this.snakeBody[j].x == xSnakeHead &amp;&amp; this.snakeBody[j].y == ySnakeHead) &#123; alert(\"游戏结束!\"); window.location.reload(); &#125;&#125; 源码下载贪吃蛇","tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://www.extlight.com/tags/Javascript/"}]},{"title":"学习 Git 玩转 GitHub","date":"2017-09-18T03:26:50.000Z","path":"2017/09/18/学习Git玩转GitHub/","text":"基本了解什么是版本控制系统版本控制系统是一种记录一个或若干个文件内容变化，以便将来查阅特定版本修订情况的系统。 什么是 GitGit是一个免费、开源的版本控制软件 什么是 GithubGithub是全球最大的社交编程及代码托管网站 Git 和 GitHub 的关系 Git是版本控制软件 Github是项目代码托管的平台，借助git来管理项目代码 什么要学习 GitHub 学习优秀的开源项目 关注行业前辈了解最新的行业动态 使用 GitHub目的借助 GitHub 托管项目代码 GitHub 中的基本概念Repository（仓库）仓库用来存放项目代码，每个项目对应一个仓库，多个开源项目则有多个仓库 Watch（关注）关注项目，当项目更新可以接收到通知 Star（收藏）收藏项目，方便下次查看 Fork（复制克隆项目）复制克隆别人的项目到自己的 Github 仓库中，独立存在，任何操作都不会对原先的仓库造成影响。 Issue（问题讨论）发现代码 bug 时，发起消息与作者讨论 Pull Request（发起请求）当 fork 仓库，修改仓库的 bug 或 添加新功能后，想同步到原先的仓库时，发起请求给原仓库作者，让其对代码审核与合并。 注册 GitHub 账号第一步：登陆官网 GitHub官网，如下图： 第二步：点击首页右上角的 “Sign up”，进入如下页面： 填写好信息，点击 “Create an account”，来到如下页面： GitHub已经帮我们设置好默认选项，我们只管点击左下角绿色按钮即可。 当看到下边的界面时，我们就注册好账号了： 创建仓库/创建新项目点击上图 “Start a project” 按钮创建项目（仓库）。但是，由于我们刚注册好账号，并没有对邮件地址进行合法校验。所以会出现如下界面： 点击 红色框住的链接，GitHub 会跳转页面且重新发送一封邮件让我们进行对邮箱地址的校验。如图： 笔者使用的是 qq 邮箱，点击右下角提示进入到 qq 邮箱管理界面，如图： 点击 “Verify email address” 连接进行校验，浏览器会打开新标签提示邮箱地址校验成功。 此时，我们点击 “Start a project” 就能真正创建项目了。此时，我们会来到如下界面： 填写好基本信息，点击 “Create a repository”，来到仓库管理界面： 根据图中的标注，我们可以根据自己的需求管理仓库。 开源项目贡献流程新建Issue提交使用问题、建议或者想法 Pull Request fork 项目 修改自己仓库的项目代码 新建 pull request 等待作者操作审核 使用 Git目的通过 Git 管理 GitHub 托管项目代码 下载安装登陆 https://www.git-scm.com/download/win 下载 安装过程傻瓜化方式（在选择安装时，选择 Git Bash 和 Git GUI ，其余默认选项即可），步骤省略。 Git 工作原理对于任何一个文件，在 Git 内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。已提交表示该文件已经被安全地保存在本地数据库中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。 由此我们看到 Git 管理项目时，文件流转的三个工作区域：Git 的工作目录，暂存区域，以及本地仓库。 每个项目都有一个 Git 目录（如果 git clone 出来的话，就是其中 .git 的目录）。它是 Git 用来保存元数据和对象数据库的地方。该目录非常重要，每次克隆镜像仓库的时候，实际拷贝的就是这个目录里面的数据。 从项目中取出某个版本的所有文件和目录，用以开始后续工作的叫做工作目录。这些文件实际上都是从 Git 目录中的压缩对象数据库中提取出来的，接下来就可以在工作目录中对这些文件进行编辑。 所谓的暂存区域只不过是个简单的文件，一般都放在 Git 目录中。有时候人们会把这个文件叫做索引文件，不过标准说法还是叫暂存区域。 基本的 Git 工作流程如下： 在工作目录中修改某些文件 对修改后的文件进行快照，然后保存到暂存区域 提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。 Git 基本命令git init初始化工作目录，在当前目录下会创建一个名为 .git 的隐藏文件夹。 git add创建或编辑文件后，执行该命令，将文件添加到暂存区 git commit将暂存区的文件推送到仓库中 git status列出当前目录所有还没有被 Git 管理的文件和被 Git 管理且被修改但还未提交(git commit)的文件 git fetch检测远程仓库所有分支 git checkout切换分支 git branch查看当前所在分支 git rm删除仓库中的文件 git clone克隆远程仓库 git push同步本地仓库到远程仓库 Git 管理远程仓库Git 连接和管理 GitHub 上的文件，为了安全性，需要设置公钥。 之前的步骤我们安装了 Git，打开 Git 安装目录下的 Git Bash ，键入 1ssh-keygen -t rsa -C &quot;GitHub邮箱地址&quot; 命令执行后会提示输入信息，我们不用填写，直接回车。最终会在系统 “C:/Users/用户名/.ssh/“ 目录中生成 rsa 和 rsa.pub 文件。 打开 rsa.pub 文件复制里边的所有内容。 回到 GitHub 中，按照如下图操作： 最后我们进行测试，在 Git Bash 中键入： 1ssh -T git@github.com 如果出现 “Hi xxx! You’ve successfully authenticated” 字样，说明我们配置成功了。 下边我们模拟场景运用 Git 命令将文件提交到 GitHub 的仓库中。 场景一：非 clone 方式该场景下，我们没有对远程仓库进行关联，需要手动初始化 .git 文件夹 在 “E:\\demo\\git\\test1”（自定义） 中，使用 Git Bash 或 CMD 键入： 123456789101112131415161718192021git initecho &quot;hello world&quot; &gt; test.txtgit add .git statusgit commit -m &quot;first commit&quot;#添加需要连接的远程仓库地址（关联远程仓库）git remote add origin git@github.com:bluesky960/test.git git fetch # 切换到 master 分支git checkout master git branch git push origin master 此时，在 Github 的 test 仓库中会多出 test.txt 文件。 场景二：clone 方式 在 “E:\\demo\\git\\test2”（自定义） 中，使用 Git Bash 或 CMD 键入： 123456789101112# 执行 clone 操作会在当前目录中创建 .git 文件夹，关联远程仓库git clone git@github.com:bluesky960/test.gitcd testecho &quot;clone hello world&quot; &gt; test2.txtgit add .git commit -m &quot;add file&quot;git push 此时，在 Github 的 test 仓库中会多出 test2.txt 文件。 为了防止每次同步文件都需要输入账号和密码，我们需要进特殊配置 打开 Git Bash 窗口，键入： 123git config --global user.name &quot;GitHub用户名&quot; git config --global user.email &quot;GitHub邮箱地址&quot; 踩坑提醒 在执行 “git remote add origin” 命令时，后边跟着是 SSH 类型的仓库地址，否则，在每次 git push 时都要输入账号和密码！ 参考资料 http://www.nowamagic.net/academy/detail/48160210","tags":[{"name":"Git","slug":"Git","permalink":"http://www.extlight.com/tags/Git/"},{"name":"GitHub","slug":"GitHub","permalink":"http://www.extlight.com/tags/GitHub/"}]},{"title":"简单介绍","date":"2017-09-15T08:21:17.000Z","path":"2017/09/15/简单介绍/","text":"新博客上线 之前在博客园写博客，但是由于其排版和样式不够友好，因此笔者搭建新博客系统。以后就在这里博客。","tags":[{"name":"其他","slug":"其他","permalink":"http://www.extlight.com/tags/其他/"}]}]